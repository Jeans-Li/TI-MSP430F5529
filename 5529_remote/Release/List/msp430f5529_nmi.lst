###############################################################################
#
# IAR C/C++ Compiler V7.10.1.973/W32 for MSP430           31/Jul/2021  19:48:27
# Copyright 1996-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  large
#    __code_model  =  large
#    Source file   =  D:\Dev\IAR\5529_remote\Drivers\src\msp430f5529_nmi.c
#    Command line  =  
#        -f C:\Users\Jeans\AppData\Local\Temp\EW7998.tmp
#        (D:\Dev\IAR\5529_remote\Drivers\src\msp430f5529_nmi.c -D NDEBUG -D
#        RAM_VECTOR -lC D:\Dev\IAR\5529_remote\Release\List -lA
#        D:\Dev\IAR\5529_remote\Release\List -o
#        D:\Dev\IAR\5529_remote\Release\Obj --debug -D__MSP430F5529__ -e
#        --double=32 --dlib_config D:\Dev\IAR\430\lib\dlib\dl430xllfn.h -I
#        D:\Dev\IAR\5529_remote\ -I D:\Dev\IAR\5529_remote\Drivers\inc\ -I
#        D:\Dev\IAR\5529_remote\Drivers\src\ -I
#        D:\Dev\IAR\5529_remote\HardWare\ -I
#        D:\Dev\IAR\5529_remote\HardWare\led\ -I
#        D:\Dev\IAR\5529_remote\HardWare\key\ -I
#        D:\Dev\IAR\5529_remote\HardWare\lcd\ -I
#        D:\Dev\IAR\5529_remote\HardWare\lcd_api\ -I
#        D:\Dev\IAR\5529_remote\HardWare\nrf24l01\ -I
#        D:\Dev\IAR\5529_remote\HardWare\oled\ -I
#        D:\Dev\IAR\5529_remote\HardWare\delay\ -I
#        D:\Dev\IAR\5529_remote\HardWare\2.2TFT\ -I
#        D:\Dev\IAR\5529_remote\System\ -I D:\Dev\IAR\5529_remote\System\inc\
#        -I D:\Dev\IAR\5529_remote\System\src\ -I D:\Dev\IAR\5529_remote\User\
#        -I D:\Dev\IAR\5529_remote\User\USER\ --core=430X --data_model=large
#        -Oh --multiplier=32 --hw_workaround=CPU40
#        --hw_workaround=nop_after_lpm -DNDEBUG --code_model=large)
#    Locale        =  Chinese (Simplified)_CHN.936
#    List file     =  D:\Dev\IAR\5529_remote\Release\List\msp430f5529_nmi.lst
#    Object file   =  D:\Dev\IAR\5529_remote\Release\Obj\msp430f5529_nmi.r43
#
###############################################################################

D:\Dev\IAR\5529_remote\Drivers\src\msp430f5529_nmi.c
      1          #include "msp430f5529_nmi.h"
      2          

   \                                 In  segment DATA20_C, align 2, align-sorted
      3          const SFR_MemMapPtr SFRX = SFR_BASE_PTR;
   \                     SFRX:
   \   000000   00010000     DC32 100H
      4          /*************************************************************************
      5          *  函数名称：NMI_Init(NMIIES ies)
      6          *  功能说明：配置NMI
      7          *  参数说明：NMIIES ies : 社会中NMI中断触发沿
      8          *  函数返回：无
      9          *  使用示例：NMI_Init(NMI_Rising); //设置NMI为上升沿触发中断
     10          *************************************************************************/  

   \                                 In  segment CODE, align 2, keep-with-next
     11          void  NMI_Init(NMIIES ies)
   \                     NMI_Init:
     12          {
     13            SFRX->SYS.NMI = ENABLE;                     //使能NMI功能
   \   000000   92D30401     BIS.W   #0x1, &0x104
     14            SFRX->IE.NMI = RESET;                       //禁止NMI中断
   \   000004   B2C010000001 BIC.W   #0x10, &0x100
     15            if(ies == NMI_Rising)
   \   00000A   4C93         CMP.B   #0x0, R12
   \   00000C   0320         JNE     ??NMI_Init_1
     16            {
     17              SFRX->SYS.NMIIES = BIT_SET;                   //设置NMI中断沿
   \   00000E   A2D30401     BIS.W   #0x2, &0x104
   \   000012   023C         JMP     ??NMI_Init_0
     18            }
     19            else
     20            {
     21              SFRX->SYS.NMIIES = RESET;
   \                     ??NMI_Init_1:
   \   000014   A2C30401     BIC.W   #0x2, &0x104
     22            }
     23            SFRX->IFG.NMI = RESET;                      //清除NMI中断标志
   \                     ??NMI_Init_0:
   \   000018                REQUIRE ?Subroutine0
   \   000018                // Fall through to label ?Subroutine0
     24          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   000000   B2C010000201 BIC.W   #0x10, &0x102
   \   000006   1001         RETA
     25          /*************************************************************************
     26          *  函数名称：NMI_DeInit()
     27          *  功能说明：屏蔽NMI功能
     28          *  参数说明：无
     29          *  函数返回：无
     30          *  使用示例：NMI_DeInit(); //取消NMI功能
     31          *************************************************************************/  

   \                                 In  segment CODE, align 2, keep-with-next
     32          void    NMI_DeInit   (void)
   \                     NMI_DeInit:
     33          {
     34            SFRX->SYS.NMI = DISABLE;                    //禁止NMI功能
   \   000000   92C30401     BIC.W   #0x1, &0x104
     35          }
   \   000004   1001         RETA
     36          /*************************************************************************
     37          *  函数名称：NMI_ITConfig (STATUS ITState)
     38          *  功能说明：设置是否使能NMI中断
     39          *  参数说明：BOOL ITState :是否使能NMI中断
     40          *  函数返回：无
     41          *  使用示例：NMI_ITConfig (ENABLE);  //使能NMI中断
     42          *************************************************************************/  

   \                                 In  segment CODE, align 2, keep-with-next
     43          void  NMI_ITConfig (STATUS ITState)
   \                     NMI_ITConfig:
     44          {
     45            if(ITState != DISABLE)
   \   000000   4C93         CMP.B   #0x0, R12
   \   000002   0424         JEQ     ??NMI_ITConfig_0
     46            {
     47              SFRX->IE.NMI = ENABLE;                    //设置使能NMI中断
   \   000004   B2D010000001 BIS.W   #0x10, &0x100
   \   00000A   1001         RETA
     48            }
     49            else
     50            {
     51              SFRX->IE.NMI = DISABLE;
   \                     ??NMI_ITConfig_0:
   \   00000C   B2C010000001 BIC.W   #0x10, &0x100
     52            }
     53          }
   \   000012   1001         RETA
     54          /*************************************************************************
     55          *  函数名称：NMI_GetITStatus(void)
     56          *  功能说明：读取NMI中断标志
     57          *  参数说明：无
     58          *  函数返回：STATUS : NMI中断事件是否发生
     59          *  使用示例：if(TRUE == NMI_GetITStatus()){...} //判断NMI中断事件是否发生
     60          *************************************************************************/  

   \                                 In  segment CODE, align 2, keep-with-next
     61          STATUS  NMI_GetITStatus(void)               
   \                     NMI_GetITStatus:
     62          {
     63            return ((SFRX->IFG.NMI) ? TRUE : FALSE);       //返回中断事件标志
   \   000000   1E420201     MOV.W   &0x102, R14
   \   000004   7EB01000     BIT.B   #0x10, R14
   \   000008   0C7C         SUBC.W  R12, R12
   \   00000A   5C53         ADD.B   #0x1, R12
   \   00000C   1001         RETA
     64          }
     65          /*************************************************************************
     66          *  函数名称：NMI_ClearITPendingBit(void)
     67          *  功能说明：清除NMI中断标志
     68          *  参数说明：无
     69          *  函数返回：无
     70          *  使用示例：NMI_ClearITPendingBit();  //清除NMI中断标志
     71          *************************************************************************/  

   \                                 In  segment CODE, align 2
     72          void  NMI_ClearITPendingBit(void)
   \                     NMI_ClearITPendingBit:
     73          {
     74             SFRX->IFG.NMI = RESET;                       //清除中断事件标志
   \   000000   ....         JMP     ?Subroutine0
   \   000002   0343         NOP
     75          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   NMI_ClearITPendingBit
      4   NMI_DeInit
      4   NMI_GetITStatus
      4   NMI_ITConfig
      4   NMI_Init


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?Subroutine0
       4  NMI_ClearITPendingBit
       6  NMI_DeInit
      14  NMI_GetITStatus
      20  NMI_ITConfig
      24  NMI_Init
       4  SFRX

 
 76 bytes in segment CODE
  4 bytes in segment DATA20_C
 
 76 bytes of CODE  memory
  4 bytes of CONST memory

Errors: none
Warnings: none
