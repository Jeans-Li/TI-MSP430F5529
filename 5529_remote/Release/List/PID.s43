///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.10.1.973/W32 for MSP430          31/Jul/2021  19:48:30
// Copyright 1996-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  D:\Dev\IAR\5529_remote\User\USER\PID.c
//    Command line  =  
//        -f C:\Users\Jeans\AppData\Local\Temp\EW8337.tmp
//        (D:\Dev\IAR\5529_remote\User\USER\PID.c -D NDEBUG -D RAM_VECTOR -lC
//        D:\Dev\IAR\5529_remote\Release\List -lA
//        D:\Dev\IAR\5529_remote\Release\List -o
//        D:\Dev\IAR\5529_remote\Release\Obj --debug -D__MSP430F5529__ -e
//        --double=32 --dlib_config D:\Dev\IAR\430\lib\dlib\dl430xllfn.h -I
//        D:\Dev\IAR\5529_remote\ -I D:\Dev\IAR\5529_remote\Drivers\inc\ -I
//        D:\Dev\IAR\5529_remote\Drivers\src\ -I
//        D:\Dev\IAR\5529_remote\HardWare\ -I
//        D:\Dev\IAR\5529_remote\HardWare\led\ -I
//        D:\Dev\IAR\5529_remote\HardWare\key\ -I
//        D:\Dev\IAR\5529_remote\HardWare\lcd\ -I
//        D:\Dev\IAR\5529_remote\HardWare\lcd_api\ -I
//        D:\Dev\IAR\5529_remote\HardWare\nrf24l01\ -I
//        D:\Dev\IAR\5529_remote\HardWare\oled\ -I
//        D:\Dev\IAR\5529_remote\HardWare\delay\ -I
//        D:\Dev\IAR\5529_remote\HardWare\2.2TFT\ -I
//        D:\Dev\IAR\5529_remote\System\ -I D:\Dev\IAR\5529_remote\System\inc\
//        -I D:\Dev\IAR\5529_remote\System\src\ -I D:\Dev\IAR\5529_remote\User\
//        -I D:\Dev\IAR\5529_remote\User\USER\ --core=430X --data_model=large
//        -Oh --multiplier=32 --hw_workaround=CPU40
//        --hw_workaround=nop_after_lpm -DNDEBUG --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  D:\Dev\IAR\5529_remote\Release\List\PID.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME PID

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN _Sub32f
        EXTERN _Mul32f
        EXTERN _Add32f
        EXTERN ?FLT_LT
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC Increment_PID_Cal
        PUBLIC PID_Cal
        PUBLIC PID_Init
        PUBLIC PID_SetIntegralOutRange
        PUBLIC PID_SetOutRange
        PUBLIC PID_SetPoint
        PUBLIC Position_PID_Cal
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L SameValue
          CFI R12H SameValue
          CFI R12 Concat
          CFI R13L SameValue
          CFI R13H SameValue
          CFI R13 Concat
          CFI R14L SameValue
          CFI R14H SameValue
          CFI R14 Concat
          CFI R15L SameValue
          CFI R15H SameValue
          CFI R15 Concat
          CFI EndCommon cfiCommon1
        
// D:\Dev\IAR\5529_remote\User\USER\PID.c
//    1 #include"pid.h"
//    2 #include"math.h"
//    3 
//    4 //初始化PID结构体参数

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//    5 void PID_Init(PID * s_PID,PID_VAR_TYPE set_point,PID_VAR_TYPE Proportion,PID_VAR_TYPE Integral, PID_VAR_TYPE Derivative)
PID_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function PID_Init
          CFI NoCalls
//    6 {
//    7    s_PID->SetPoint = set_point;
        MOV.W   R14, 0(R12)
        MOV.W   R15, 0x2(R12)
//    8    s_PID->Proportion = Proportion;
        MOV.W   0x4(SP), 0x4(R12)
        MOV.W   0x6(SP), 0x6(R12)
//    9    s_PID->Integral = Integral;
        MOV.W   0x8(SP), 0x8(R12)
        MOV.W   0xa(SP), 0xa(R12)
//   10    s_PID->Derivative = Derivative;
        MOV.W   0xc(SP), 0xc(R12)
        MOV.W   0xe(SP), 0xe(R12)
//   11    s_PID->Error = 0;
        MOVA    #0x0, 0x14(R12)
//   12    s_PID->LastError = 0;
        MOVA    #0x0, 0x18(R12)
//   13    s_PID->PrevError = 0;
        MOVA    #0x0, 0x1c(R12)
//   14    s_PID->SumError = 0;
        MOVA    #0x0, 0x10(R12)
//   15    s_PID->LastResult = 0;
        MOVA    #0x0, 0x20(R12)
//   16    s_PID->Result = 0;
        MOVA    #0x0, 0x24(R12)
//   17    s_PID->OutMax = DEFAULT_PID_OUT_MAX;
        MOV.W   #0x4000, 0x28(R12)
        MOV.W   #0x461c, 0x2a(R12)
//   18    s_PID->OutMin = DEFAULT_PID_OUT_MIN;
        MOV.W   #0x4000, 0x2c(R12)
        MOV.W   #0xc61c, 0x2e(R12)
//   19    s_PID->IntegralMax = DEFAULT_PID_INTEGRAL_OUT_MAX;
        MOV.W   #0x4000, 0x30(R12)
        MOV.W   #0x461c, 0x32(R12)
//   20    s_PID->IntegralMin = DEFAULT_PID_INTEGRAL_OUT_MIN;
        MOV.W   #0x4000, 0x34(R12)
        MOV.W   #0xc61c, 0x36(R12)
//   21 }
        RETA
          CFI EndBlock cfiBlock0
//   22 //设置目标值

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   23 void  PID_SetPoint     (PID * s_PID, PID_VAR_TYPE set_point) 
PID_SetPoint:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function PID_SetPoint
          CFI NoCalls
//   24 {
//   25    s_PID->SetPoint = set_point;
        MOV.W   R14, 0(R12)
        MOV.W   R15, 0x2(R12)
//   26 }      
        RETA
          CFI EndBlock cfiBlock1
//   27 //设置PID输出范围

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   28 void  PID_SetOutRange  (PID * s_PID, PID_VAR_TYPE outMax,PID_VAR_TYPE outMin)
PID_SetOutRange:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function PID_SetOutRange
          CFI NoCalls
//   29 {
//   30   s_PID->OutMax = outMax;
        MOV.W   R14, 0x28(R12)
        MOV.W   R15, 0x2a(R12)
//   31   s_PID->OutMin = outMin;
        MOV.W   0x4(SP), 0x2c(R12)
        MOV.W   0x6(SP), 0x2e(R12)
//   32 }
        RETA
          CFI EndBlock cfiBlock2
//   33 //设置PID积分范围

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   34 void  PID_SetIntegralOutRange(PID * s_PID, PID_VAR_TYPE outMax,PID_VAR_TYPE outMin)
PID_SetIntegralOutRange:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function PID_SetIntegralOutRange
          CFI NoCalls
//   35 {
//   36   s_PID->IntegralMax = outMax;
        MOV.W   R14, 0x30(R12)
        MOV.W   R15, 0x32(R12)
//   37   s_PID->IntegralMin = outMin;
        MOV.W   0x4(SP), 0x34(R12)
        MOV.W   0x6(SP), 0x36(R12)
//   38 }
        RETA
          CFI EndBlock cfiBlock3
//   39 //增量式PID计算

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   40 PID_VAR_TYPE Increment_PID_Cal(PID * s_PID,PID_VAR_TYPE now_point)
Increment_PID_Cal:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function Increment_PID_Cal
//   41 {
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOVA    R12, R8
//   42     s_PID->LastResult = s_PID->Result;					       // 简单赋值运算	
        MOV.W   0x24(R12), R10
        MOV.W   0x26(R12), R11
        MOV.W   R10, 0x20(R12)
        MOV.W   R11, 0x22(R12)
//   43     //误差计算   
//   44     s_PID->Error = s_PID->SetPoint - now_point;
        MOV.W   @R8, R12
        MOV.W   0x2(R8), R13
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOV.W   R6, 0x14(R8)
        MOV.W   R7, 0x16(R8)
//   45     //PID计算   
//   46     s_PID->Result = s_PID->LastResult 
//   47                   + s_PID->Proportion  * (s_PID->Error - s_PID->LastError)                          // 比例项
//   48                   + s_PID->Integral    *  s_PID->Error	                                       // 积分项 
//   49                   + s_PID->Derivative  * (s_PID->Error - 2*(s_PID->LastError) + s_PID->PrevError);  // 微分项
        MOV.W   0x18(R8), R4
        MOV.W   0x1a(R8), R5
        CALLA   #?Subroutine5
??CrossCallReturnLabel_10:
        MOV.W   0x4(R8), R12
        MOV.W   0x6(R8), R13
        CALLA   #?Subroutine3
??CrossCallReturnLabel_4:
        MOV.W   0x8(R8), R12
        MOV.W   0xa(R8), R13
        MOV.W   R6, R14
        MOV.W   R7, R15
        CALLA   #?Subroutine3
??CrossCallReturnLabel_5:
        MOV.W   R4, R12
        MOV.W   R5, R13
        MOV.W   #0x0, R14
        MOV.W   #0x4000, R15
        CALLA   #?Subroutine6
??CrossCallReturnLabel_6:
        CALLA   #??Subroutine7_0
??CrossCallReturnLabel_9:
        MOV.W   0x1c(R8), R12
        MOV.W   0x1e(R8), R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   0xc(R8), R12
        MOV.W   0xe(R8), R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R10, R14
        MOV.W   R11, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, R10
        MOV.W   R13, R11
//   50    
//   51     s_PID->PrevError = s_PID->LastError;		               // 简单赋值运算
        MOV.W   R4, 0x1c(R8)
        MOV.W   R5, 0x1e(R8)
//   52     s_PID->LastError = s_PID->Error; 				       // 简单赋值运算
        MOV.W   R6, 0x18(R8)
        MOV.W   R7, 0x1a(R8)
//   53     //输出限幅
//   54     if(s_PID->Result > s_PID->OutMax)s_PID->Result = s_PID->OutMax;
        MOV.W   0x28(R8), R12
        MOV.W   0x2a(R8), R13
        MOV.W   R10, R14
        MOV.W   R11, R15
          CFI FunCall ?FLT_LT
        CALLA   #?FLT_LT
        JNC     ??Increment_PID_Cal_1
        MOV.W   R12, R10
        MOV.W   R13, R11
        JMP     ??Increment_PID_Cal_0
//   55     else if(s_PID->Result < s_PID->OutMin)s_PID->Result = s_PID->OutMin;
??Increment_PID_Cal_1:
        MOV.W   0x2c(R8), R14
        MOV.W   0x2e(R8), R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall ?FLT_LT
        CALLA   #?FLT_LT
        JNC     ??Increment_PID_Cal_0
        MOV.W   R14, R10
        MOV.W   R15, R11
??Increment_PID_Cal_0:
        MOV.W   R10, 0x24(R8)
        MOV.W   R11, 0x26(R8)
//   56     
//   57     return s_PID->Result;	
        MOV.W   0x24(R8), R12
        MOV.W   R11, R13
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
//   58 }
          CFI EndBlock cfiBlock4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine3:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function Increment_PID_Cal
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+40
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function Increment_PID_Cal
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond6) R4L Frame(CFA, -36)
          CFI (cfiCond6) R4H Frame(CFA, -34)
          CFI (cfiCond6) R5L Frame(CFA, -32)
          CFI (cfiCond6) R5H Frame(CFA, -30)
          CFI (cfiCond6) R6L Frame(CFA, -28)
          CFI (cfiCond6) R6H Frame(CFA, -26)
          CFI (cfiCond6) R7L Frame(CFA, -24)
          CFI (cfiCond6) R7H Frame(CFA, -22)
          CFI (cfiCond6) R8L Frame(CFA, -20)
          CFI (cfiCond6) R8H Frame(CFA, -18)
          CFI (cfiCond6) R9L Frame(CFA, -16)
          CFI (cfiCond6) R9H Frame(CFA, -14)
          CFI (cfiCond6) R10L Frame(CFA, -12)
          CFI (cfiCond6) R10H Frame(CFA, -10)
          CFI (cfiCond6) R11L Frame(CFA, -8)
          CFI (cfiCond6) R11H Frame(CFA, -6)
          CFI (cfiCond6) CFA SP+40
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
          CFI (cfiCond5) FunCall Increment_PID_Cal _Mul32f
          CFI (cfiCond5) FunCall Increment_PID_Cal _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI (cfiCond5) FunCall Increment_PID_Cal _Add32f
          CFI (cfiCond5) FunCall Increment_PID_Cal _Add32f
        CALLA   #_Add32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        RETA
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7
//   59 //位置式PID计算

        RSEG `CODE`:CODE:NOROOT(1)
//   60 PID_VAR_TYPE Position_PID_Cal(PID * s_PID,PID_VAR_TYPE now_point)
Position_PID_Cal:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function Position_PID_Cal
          CFI NoCalls
//   61 {
        PUSHM.A #0x7, R10
          CFI R4L Frame(CFA, -32)
          CFI R4H Frame(CFA, -30)
          CFI R5L Frame(CFA, -28)
          CFI R5H Frame(CFA, -26)
          CFI R6L Frame(CFA, -24)
          CFI R6H Frame(CFA, -22)
          CFI R7L Frame(CFA, -20)
          CFI R7H Frame(CFA, -18)
          CFI R8L Frame(CFA, -16)
          CFI R8H Frame(CFA, -14)
          CFI R9L Frame(CFA, -12)
          CFI R9H Frame(CFA, -10)
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+32
        CALLA   #?Subroutine1
//   62     s_PID->LastResult = s_PID->Result;			       // 简单赋值运算
//   63     //误差计算
//   64     s_PID->Error = s_PID->SetPoint - now_point;
//   65     s_PID->SumError += s_PID->Error;                            //积分误差累加
//   66     //积分限幅
//   67     PID_VAR_TYPE IOutValue = s_PID->SumError * s_PID->Integral;
//   68     if(IOutValue > s_PID->IntegralMax)IOutValue = s_PID->IntegralMax;
//   69     else if(IOutValue < s_PID->IntegralMin)IOutValue = s_PID->IntegralMin;
//   70     //PID计算
//   71     s_PID->Result =  s_PID->Proportion  *  s_PID->Error                          // 比例项
//   72                    + IOutValue                                                     // 积分项 
//   73                    + s_PID->Derivative  * (s_PID->Error - s_PID->LastError);     // 微分项
??CrossCallReturnLabel_0:
        MOV.W   0x4(R10), R12
        MOV.W   0x6(R10), R13
        MOV.W   R8, R14
        MOV.W   R9, R15
        CALLA   #?Subroutine6
??CrossCallReturnLabel_7:
        CALLA   #?Subroutine2
??CrossCallReturnLabel_2:
          CFI EndBlock cfiBlock8
        REQUIRE ?Subroutine0
        // Fall through to label ?Subroutine0

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine0:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI NoFunction
          CFI CFA SP+32
          CFI R4L Frame(CFA, -32)
          CFI R4H Frame(CFA, -30)
          CFI R5L Frame(CFA, -28)
          CFI R5H Frame(CFA, -26)
          CFI R6L Frame(CFA, -24)
          CFI R6H Frame(CFA, -22)
          CFI R7L Frame(CFA, -20)
          CFI R7H Frame(CFA, -18)
          CFI R8L Frame(CFA, -16)
          CFI R8H Frame(CFA, -14)
          CFI R9L Frame(CFA, -12)
          CFI R9H Frame(CFA, -10)
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
        MOV.W   R12, 0x24(R10)
        MOV.W   R13, 0x26(R10)
//   74     
//   75     s_PID->PrevError = s_PID->LastError;		                       // 简单赋值运算
        MOV.W   R4, 0x1c(R10)
        MOV.W   R5, 0x1e(R10)
//   76     s_PID->LastError = s_PID->Error; 				       // 简单赋值运算
        MOV.W   0x14(R10), 0x18(R10)
        MOV.W   0x16(R10), 0x1a(R10)
//   77  
//   78     //输出限幅
//   79     if(s_PID->Result > s_PID->OutMax)s_PID->Result = s_PID->OutMax;
        MOV.W   0x24(R10), R8
        MOV.W   0x26(R10), R9
        MOV.W   0x28(R10), R12
        MOV.W   0x2a(R10), R13
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall Position_PID_Cal ?FLT_LT
          CFI FunCall PID_Cal ?FLT_LT
        CALLA   #?FLT_LT
        JNC     ??Subroutine0_1
        MOV.W   R12, 0x24(R10)
        MOV.W   R13, 0x26(R10)
        JMP     ??Subroutine0_0
//   80     else if(s_PID->Result < s_PID->OutMin)s_PID->Result = s_PID->OutMin;
??Subroutine0_1:
        MOV.W   0x2c(R10), R14
        MOV.W   0x2e(R10), R15
        MOV.W   R8, R12
        MOV.W   R9, R13
          CFI FunCall Position_PID_Cal ?FLT_LT
          CFI FunCall PID_Cal ?FLT_LT
        CALLA   #?FLT_LT
        JNC     ??Subroutine0_0
        MOV.W   R14, 0x24(R10)
        MOV.W   R15, 0x26(R10)
//   81     
//   82     return s_PID->Result;	
??Subroutine0_0:
        MOV.W   0x24(R10), R12
        MOV.W   0x26(R10), R13
        POPM.A  #0x7, R10
          CFI CFA SP+4
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R10H SameValue
        RETA
          CFI EndBlock cfiBlock9

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine6:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function Increment_PID_Cal
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+40
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function Position_PID_Cal
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond11) R4L Frame(CFA, -32)
          CFI (cfiCond11) R4H Frame(CFA, -30)
          CFI (cfiCond11) R5L Frame(CFA, -28)
          CFI (cfiCond11) R5H Frame(CFA, -26)
          CFI (cfiCond11) R6L Frame(CFA, -24)
          CFI (cfiCond11) R6H Frame(CFA, -22)
          CFI (cfiCond11) R7L Frame(CFA, -20)
          CFI (cfiCond11) R7H Frame(CFA, -18)
          CFI (cfiCond11) R8L Frame(CFA, -16)
          CFI (cfiCond11) R8H Frame(CFA, -14)
          CFI (cfiCond11) R9L Frame(CFA, -12)
          CFI (cfiCond11) R9H Frame(CFA, -10)
          CFI (cfiCond11) R10L Frame(CFA, -8)
          CFI (cfiCond11) R10H Frame(CFA, -6)
          CFI (cfiCond11) CFA SP+36
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function Position_PID_Cal
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_8, ??CrossCallReturnLabel_2
          CFI (cfiCond12) R4L Frame(CFA, -32)
          CFI (cfiCond12) R4H Frame(CFA, -30)
          CFI (cfiCond12) R5L Frame(CFA, -28)
          CFI (cfiCond12) R5H Frame(CFA, -26)
          CFI (cfiCond12) R6L Frame(CFA, -24)
          CFI (cfiCond12) R6H Frame(CFA, -22)
          CFI (cfiCond12) R7L Frame(CFA, -20)
          CFI (cfiCond12) R7H Frame(CFA, -18)
          CFI (cfiCond12) R8L Frame(CFA, -16)
          CFI (cfiCond12) R8H Frame(CFA, -14)
          CFI (cfiCond12) R9L Frame(CFA, -12)
          CFI (cfiCond12) R9H Frame(CFA, -10)
          CFI (cfiCond12) R10L Frame(CFA, -8)
          CFI (cfiCond12) R10H Frame(CFA, -6)
          CFI (cfiCond12) CFA SP+40
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function PID_Cal
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_8, ??CrossCallReturnLabel_3
          CFI (cfiCond13) R4L Frame(CFA, -32)
          CFI (cfiCond13) R4H Frame(CFA, -30)
          CFI (cfiCond13) R5L Frame(CFA, -28)
          CFI (cfiCond13) R5H Frame(CFA, -26)
          CFI (cfiCond13) R6L Frame(CFA, -24)
          CFI (cfiCond13) R6H Frame(CFA, -22)
          CFI (cfiCond13) R7L Frame(CFA, -20)
          CFI (cfiCond13) R7H Frame(CFA, -18)
          CFI (cfiCond13) R8L Frame(CFA, -16)
          CFI (cfiCond13) R8H Frame(CFA, -14)
          CFI (cfiCond13) R9L Frame(CFA, -12)
          CFI (cfiCond13) R9H Frame(CFA, -10)
          CFI (cfiCond13) R10L Frame(CFA, -8)
          CFI (cfiCond13) R10H Frame(CFA, -6)
          CFI (cfiCond13) CFA SP+40
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
          CFI (cfiCond10) FunCall Increment_PID_Cal _Mul32f
          CFI (cfiCond11) FunCall Position_PID_Cal _Mul32f
          CFI (cfiCond11) FunCall Position_PID_Cal _Mul32f
          CFI (cfiCond13) FunCall PID_Cal _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   R6, R12
        MOV.W   R7, R13
        RETA
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14
//   83 }
//   84 //比例外置式PID

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   85 PID_VAR_TYPE PID_Cal(PID * s_PID,PID_VAR_TYPE now_point)
PID_Cal:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function PID_Cal
//   86 {  
        PUSHM.A #0x7, R10
          CFI R4L Frame(CFA, -32)
          CFI R4H Frame(CFA, -30)
          CFI R5L Frame(CFA, -28)
          CFI R5H Frame(CFA, -26)
          CFI R6L Frame(CFA, -24)
          CFI R6H Frame(CFA, -22)
          CFI R7L Frame(CFA, -20)
          CFI R7H Frame(CFA, -18)
          CFI R8L Frame(CFA, -16)
          CFI R8H Frame(CFA, -14)
          CFI R9L Frame(CFA, -12)
          CFI R9H Frame(CFA, -10)
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+32
        CALLA   #?Subroutine1
//   87     s_PID->LastResult = s_PID->Result;			       // 简单赋值运算
//   88     //误差计算
//   89     s_PID->Error = s_PID->SetPoint - now_point;
//   90     s_PID->SumError += s_PID->Error;                            //积分误差累加
//   91     //积分限幅
//   92     PID_VAR_TYPE IOutValue = s_PID->SumError * s_PID->Integral;
//   93     if(IOutValue > s_PID->IntegralMax)IOutValue = s_PID->IntegralMax;
//   94     else if(IOutValue < s_PID->IntegralMin)IOutValue = s_PID->IntegralMin;
//   95     //PID计算   
//   96     s_PID->Result = s_PID->Proportion *
//   97        (s_PID->Error + IOutValue + s_PID->Derivative * (s_PID->Error - s_PID->LastError) );
??CrossCallReturnLabel_1:
        MOV.W   R8, R12
        MOV.W   R9, R13
        MOV.W   R6, R14
        MOV.W   R7, R15
        CALLA   #?Subroutine2
??CrossCallReturnLabel_3:
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   0x4(R10), R12
        MOV.W   0x6(R10), R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        JMP     ?Subroutine0
        NOP
          CFI EndBlock cfiBlock15

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine5:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function Increment_PID_Cal
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+40
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function Position_PID_Cal
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_2
          CFI (cfiCond17) R4L Frame(CFA, -32)
          CFI (cfiCond17) R4H Frame(CFA, -30)
          CFI (cfiCond17) R5L Frame(CFA, -28)
          CFI (cfiCond17) R5H Frame(CFA, -26)
          CFI (cfiCond17) R6L Frame(CFA, -24)
          CFI (cfiCond17) R6H Frame(CFA, -22)
          CFI (cfiCond17) R7L Frame(CFA, -20)
          CFI (cfiCond17) R7H Frame(CFA, -18)
          CFI (cfiCond17) R8L Frame(CFA, -16)
          CFI (cfiCond17) R8H Frame(CFA, -14)
          CFI (cfiCond17) R9L Frame(CFA, -12)
          CFI (cfiCond17) R9H Frame(CFA, -10)
          CFI (cfiCond17) R10L Frame(CFA, -8)
          CFI (cfiCond17) R10H Frame(CFA, -6)
          CFI (cfiCond17) CFA SP+40
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function PID_Cal
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_3
          CFI (cfiCond18) R4L Frame(CFA, -32)
          CFI (cfiCond18) R4H Frame(CFA, -30)
          CFI (cfiCond18) R5L Frame(CFA, -28)
          CFI (cfiCond18) R5H Frame(CFA, -26)
          CFI (cfiCond18) R6L Frame(CFA, -24)
          CFI (cfiCond18) R6H Frame(CFA, -22)
          CFI (cfiCond18) R7L Frame(CFA, -20)
          CFI (cfiCond18) R7H Frame(CFA, -18)
          CFI (cfiCond18) R8L Frame(CFA, -16)
          CFI (cfiCond18) R8H Frame(CFA, -14)
          CFI (cfiCond18) R9L Frame(CFA, -12)
          CFI (cfiCond18) R9H Frame(CFA, -10)
          CFI (cfiCond18) R10L Frame(CFA, -8)
          CFI (cfiCond18) R10H Frame(CFA, -6)
          CFI (cfiCond18) CFA SP+40
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOV.W   R4, R14
        MOV.W   R5, R15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19
        REQUIRE ??Subroutine7_0
        // Fall through to label ??Subroutine7_0

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
??Subroutine7_0:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function Increment_PID_Cal
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+40
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function Increment_PID_Cal
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond21) R4L Frame(CFA, -36)
          CFI (cfiCond21) R4H Frame(CFA, -34)
          CFI (cfiCond21) R5L Frame(CFA, -32)
          CFI (cfiCond21) R5H Frame(CFA, -30)
          CFI (cfiCond21) R6L Frame(CFA, -28)
          CFI (cfiCond21) R6H Frame(CFA, -26)
          CFI (cfiCond21) R7L Frame(CFA, -24)
          CFI (cfiCond21) R7H Frame(CFA, -22)
          CFI (cfiCond21) R8L Frame(CFA, -20)
          CFI (cfiCond21) R8H Frame(CFA, -18)
          CFI (cfiCond21) R9L Frame(CFA, -16)
          CFI (cfiCond21) R9H Frame(CFA, -14)
          CFI (cfiCond21) R10L Frame(CFA, -12)
          CFI (cfiCond21) R10H Frame(CFA, -10)
          CFI (cfiCond21) R11L Frame(CFA, -8)
          CFI (cfiCond21) R11H Frame(CFA, -6)
          CFI (cfiCond21) CFA SP+40
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function Position_PID_Cal
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_2
          CFI (cfiCond22) R4L Frame(CFA, -32)
          CFI (cfiCond22) R4H Frame(CFA, -30)
          CFI (cfiCond22) R5L Frame(CFA, -28)
          CFI (cfiCond22) R5H Frame(CFA, -26)
          CFI (cfiCond22) R6L Frame(CFA, -24)
          CFI (cfiCond22) R6H Frame(CFA, -22)
          CFI (cfiCond22) R7L Frame(CFA, -20)
          CFI (cfiCond22) R7H Frame(CFA, -18)
          CFI (cfiCond22) R8L Frame(CFA, -16)
          CFI (cfiCond22) R8H Frame(CFA, -14)
          CFI (cfiCond22) R9L Frame(CFA, -12)
          CFI (cfiCond22) R9H Frame(CFA, -10)
          CFI (cfiCond22) R10L Frame(CFA, -8)
          CFI (cfiCond22) R10H Frame(CFA, -6)
          CFI (cfiCond22) CFA SP+40
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function PID_Cal
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_3
          CFI (cfiCond23) R4L Frame(CFA, -32)
          CFI (cfiCond23) R4H Frame(CFA, -30)
          CFI (cfiCond23) R5L Frame(CFA, -28)
          CFI (cfiCond23) R5H Frame(CFA, -26)
          CFI (cfiCond23) R6L Frame(CFA, -24)
          CFI (cfiCond23) R6H Frame(CFA, -22)
          CFI (cfiCond23) R7L Frame(CFA, -20)
          CFI (cfiCond23) R7H Frame(CFA, -18)
          CFI (cfiCond23) R8L Frame(CFA, -16)
          CFI (cfiCond23) R8H Frame(CFA, -14)
          CFI (cfiCond23) R9L Frame(CFA, -12)
          CFI (cfiCond23) R9H Frame(CFA, -10)
          CFI (cfiCond23) R10L Frame(CFA, -8)
          CFI (cfiCond23) R10H Frame(CFA, -6)
          CFI (cfiCond23) CFA SP+40
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
          CFI (cfiCond20) FunCall Increment_PID_Cal _Sub32f
          CFI (cfiCond20) FunCall Increment_PID_Cal _Sub32f
          CFI (cfiCond22) FunCall Position_PID_Cal _Sub32f
          CFI (cfiCond23) FunCall PID_Cal _Sub32f
        CALLA   #_Sub32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        RETA
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine2:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function Position_PID_Cal
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R4L Frame(CFA, -32)
          CFI R4H Frame(CFA, -30)
          CFI R5L Frame(CFA, -28)
          CFI R5H Frame(CFA, -26)
          CFI R6L Frame(CFA, -24)
          CFI R6H Frame(CFA, -22)
          CFI R7L Frame(CFA, -20)
          CFI R7H Frame(CFA, -18)
          CFI R8L Frame(CFA, -16)
          CFI R8H Frame(CFA, -14)
          CFI R9L Frame(CFA, -12)
          CFI R9H Frame(CFA, -10)
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+36
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function PID_Cal
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond26) R4L Frame(CFA, -32)
          CFI (cfiCond26) R4H Frame(CFA, -30)
          CFI (cfiCond26) R5L Frame(CFA, -28)
          CFI (cfiCond26) R5H Frame(CFA, -26)
          CFI (cfiCond26) R6L Frame(CFA, -24)
          CFI (cfiCond26) R6H Frame(CFA, -22)
          CFI (cfiCond26) R7L Frame(CFA, -20)
          CFI (cfiCond26) R7H Frame(CFA, -18)
          CFI (cfiCond26) R8L Frame(CFA, -16)
          CFI (cfiCond26) R8H Frame(CFA, -14)
          CFI (cfiCond26) R9L Frame(CFA, -12)
          CFI (cfiCond26) R9H Frame(CFA, -10)
          CFI (cfiCond26) R10L Frame(CFA, -8)
          CFI (cfiCond26) R10H Frame(CFA, -6)
          CFI (cfiCond26) CFA SP+36
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
          CFI (cfiCond25) FunCall Position_PID_Cal _Add32f
          CFI (cfiCond26) FunCall PID_Cal _Add32f
        CALLA   #_Add32f
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOV.W   R8, R12
        MOV.W   R9, R13
        CALLA   #?Subroutine5
??CrossCallReturnLabel_11:
        MOV.W   0xc(R10), R12
        MOV.W   0xe(R10), R13
        CALLA   #?Subroutine6
??CrossCallReturnLabel_8:
          CFI (cfiCond25) TailCall Position_PID_Cal _Add32f
          CFI (cfiCond26) TailCall PID_Cal _Add32f
        BRA     #_Add32f
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine1:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function Position_PID_Cal
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R4L Frame(CFA, -32)
          CFI R4H Frame(CFA, -30)
          CFI R5L Frame(CFA, -28)
          CFI R5H Frame(CFA, -26)
          CFI R6L Frame(CFA, -24)
          CFI R6H Frame(CFA, -22)
          CFI R7L Frame(CFA, -20)
          CFI R7H Frame(CFA, -18)
          CFI R8L Frame(CFA, -16)
          CFI R8H Frame(CFA, -14)
          CFI R9L Frame(CFA, -12)
          CFI R9H Frame(CFA, -10)
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+36
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function PID_Cal
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond29) R4L Frame(CFA, -32)
          CFI (cfiCond29) R4H Frame(CFA, -30)
          CFI (cfiCond29) R5L Frame(CFA, -28)
          CFI (cfiCond29) R5H Frame(CFA, -26)
          CFI (cfiCond29) R6L Frame(CFA, -24)
          CFI (cfiCond29) R6H Frame(CFA, -22)
          CFI (cfiCond29) R7L Frame(CFA, -20)
          CFI (cfiCond29) R7H Frame(CFA, -18)
          CFI (cfiCond29) R8L Frame(CFA, -16)
          CFI (cfiCond29) R8H Frame(CFA, -14)
          CFI (cfiCond29) R9L Frame(CFA, -12)
          CFI (cfiCond29) R9H Frame(CFA, -10)
          CFI (cfiCond29) R10L Frame(CFA, -8)
          CFI (cfiCond29) R10H Frame(CFA, -6)
          CFI (cfiCond29) CFA SP+36
          CFI Block cfiPicker30 Using cfiCommon1
          CFI (cfiPicker30) NoFunction
          CFI (cfiPicker30) Picker
        MOVA    R12, R10
        MOV.W   0x24(R12), 0x20(R12)
        MOV.W   0x26(R12), 0x22(R12)
        MOV.W   @R10, R12
        MOV.W   0x2(R10), R13
          CFI (cfiCond28) FunCall Position_PID_Cal _Sub32f
          CFI (cfiCond29) FunCall PID_Cal _Sub32f
        CALLA   #_Sub32f
        MOV.W   R12, R8
        MOV.W   R13, R9
        MOV.W   R8, 0x14(R10)
        MOV.W   R9, 0x16(R10)
        MOV.W   0x10(R10), R12
        MOV.W   0x12(R10), R13
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI (cfiCond28) FunCall Position_PID_Cal _Add32f
          CFI (cfiCond29) FunCall PID_Cal _Add32f
        CALLA   #_Add32f
        MOV.W   R12, 0x10(R10)
        MOV.W   R13, 0x12(R10)
        MOV.W   0x8(R10), R14
        MOV.W   0xa(R10), R15
          CFI (cfiCond28) FunCall Position_PID_Cal _Mul32f
          CFI (cfiCond29) FunCall PID_Cal _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOV.W   0x30(R10), R12
        MOV.W   0x32(R10), R13
        MOV.W   R6, R14
        MOV.W   R7, R15
          CFI (cfiCond28) FunCall Position_PID_Cal ?FLT_LT
          CFI (cfiCond29) FunCall PID_Cal ?FLT_LT
        CALLA   #?FLT_LT
        JNC     ??Position_PID_Cal_0
        MOV.W   R12, R6
        MOV.W   R13, R7
        JMP     ??Position_PID_Cal_1
??Position_PID_Cal_0:
        MOV.W   0x34(R10), R14
        MOV.W   0x36(R10), R15
        MOV.W   R6, R12
        MOV.W   R7, R13
          CFI (cfiCond28) FunCall Position_PID_Cal ?FLT_LT
          CFI (cfiCond29) FunCall PID_Cal ?FLT_LT
        CALLA   #?FLT_LT
        JNC     ??Position_PID_Cal_1
        MOV.W   R14, R6
        MOV.W   R15, R7
??Position_PID_Cal_1:
        MOV.W   0x18(R10), R4
        MOV.W   0x1a(R10), R5
        RETA
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiPicker30

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//   98    
//   99     s_PID->PrevError = s_PID->LastError;		                       // 简单赋值运算
//  100     s_PID->LastError = s_PID->Error; 				       // 简单赋值运算
//  101     //输出限幅
//  102     if(s_PID->Result > s_PID->OutMax)s_PID->Result = s_PID->OutMax;
//  103     else if(s_PID->Result < s_PID->OutMin)s_PID->Result = s_PID->OutMin;
//  104     
//  105     return s_PID->Result;
//  106 }
// 
// 772 bytes in segment CODE
// 
// 772 bytes of CODE memory
//
//Errors: none
//Warnings: none
