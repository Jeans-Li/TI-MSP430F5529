###############################################################################
#
# IAR C/C++ Compiler V7.10.1.973/W32 for MSP430           02/Aug/2021  17:19:14
# Copyright 1996-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  large
#    __code_model  =  large
#    Source file   =  
#        D:\Dev\IAR\5529_MPU6050\Drivers\src\msp430f5529_compater.c
#    Command line  =  
#        -f C:\Users\Jeans\AppData\Local\Temp\EW9430.tmp
#        (D:\Dev\IAR\5529_MPU6050\Drivers\src\msp430f5529_compater.c -D NDEBUG
#        -D RAM_VECTOR -lC D:\Dev\IAR\5529_MPU6050\Release\List -lA
#        D:\Dev\IAR\5529_MPU6050\Release\List -o
#        D:\Dev\IAR\5529_MPU6050\Release\Obj --debug -D__MSP430F5529__ -e
#        --double=32 --dlib_config D:\Dev\IAR\430\lib\dlib\dl430xllfn.h -I
#        D:\Dev\IAR\5529_MPU6050\ -I D:\Dev\IAR\5529_MPU6050\Drivers\inc\ -I
#        D:\Dev\IAR\5529_MPU6050\Drivers\src\ -I
#        D:\Dev\IAR\5529_MPU6050\HardWare\ -I
#        D:\Dev\IAR\5529_MPU6050\HardWare\led\ -I
#        D:\Dev\IAR\5529_MPU6050\HardWare\key\ -I
#        D:\Dev\IAR\5529_MPU6050\HardWare\lcd\ -I
#        D:\Dev\IAR\5529_MPU6050\HardWare\lcd_api\ -I
#        D:\Dev\IAR\5529_MPU6050\HardWare\nrf24l01\ -I
#        D:\Dev\IAR\5529_MPU6050\HardWare\oled\ -I
#        D:\Dev\IAR\5529_MPU6050\HardWare\delay\ -I
#        D:\Dev\IAR\5529_MPU6050\HardWare\2.2TFT\ -I
#        D:\Dev\IAR\5529_MPU6050\System\ -I D:\Dev\IAR\5529_MPU6050\System\inc\
#        -I D:\Dev\IAR\5529_MPU6050\System\src\ -I
#        D:\Dev\IAR\5529_MPU6050\User\ -I D:\Dev\IAR\5529_MPU6050\User\USER\ -I
#        D:\Dev\IAR\5529_MPU6050\HardWare\mpu6050\ --core=430X
#        --data_model=large -Oh --multiplier=32 --hw_workaround=CPU40
#        --hw_workaround=nop_after_lpm -DNDEBUG --code_model=large)
#    Locale        =  Chinese (Simplified)_CHN.936
#    List file     =  
#        D:\Dev\IAR\5529_MPU6050\Release\List\msp430f5529_compater.lst
#    Object file   =  
#        D:\Dev\IAR\5529_MPU6050\Release\Obj\msp430f5529_compater.r43
#
###############################################################################

D:\Dev\IAR\5529_MPU6050\Drivers\src\msp430f5529_compater.c
      1          #include "msp430f5529_compater.h"

   \                                 In  segment DATA16_AN, at 0x8c4
   \   union <unnamed> __data16 _A_CBCTL2_L
   \                     _A_CBCTL2_L:
   \   000000                DS8 2
      2          #include "msp430f5529_gpio.h"
      3          

   \                                 In  segment DATA20_C, align 2, align-sorted
      4          const COMPB_MemMapPtr CB = COMPB_BASE_PTR;
   \                     CB:
   \   000000   C0080000     DC32 8C0H
      5          /*******************************************************************************
      6          *  函数名称：CompaterB_Init(CompaterB_CHn CB0,CompaterB_CHn CB1)
      7          *  功能说明：初始化比较器输入源
      8          *  参数说明：CompaterB_CHn CB0 :比较器输入通道+
      9                       CompaterB_CHn CB1 :比较器输入通道-
     10          *  函数返回：无
     11          *  参考资料：http://www.docin.com/p-676623167.html
     12          *  使用示例： CompaterB_Init(CB_CH0,CB_VREF_2_0V);    //初始化比较器CB_CH0为正输入端，CB_VREF_2_0V为负输入端
     13          ********************************************************************************/

   \                                 In  segment CODE, align 2
     14          void CompaterB_Init(CompaterB_CHn CB0,CompaterB_CHn CB1)
   \                     CompaterB_Init:
     15          {
   \   000000   3B14         PUSHM.A #0x4, R11
   \   000002   4A4C         MOV.B   R12, R10
   \   000004   4B4D         MOV.B   R13, R11
     16            ASSERT((CB0<CB_CH11) || (CB1<CB_CH11),"CompaterB_Init","CompaterB比较器只能有一个通道使用参考电压！\n");//只能有一个通道使用参考电压
     17            //设置引脚  
     18            if(CB0 <= CB_CH11)
   \   000006   79400C00     MOV.B   #0xc, R9
   \   00000A   4C99         CMP.B   R9, R12
   \   00000C   192C         JC      ??CompaterB_Init_5
   \   00000E   484C         MOV.B   R12, R8
   \   000010   7C92         CMP.B   #0x8, R12
   \   000012   ........     CALLA   #?Subroutine0
     19            { //初始化引脚为第二功能
     20              GPIO_Init((CB0 < CB_CH8) ? P6 : P7, (CB0 < CB_CH8) ? CB0 : (CB0-8),GPI|SEL );
     21              CB->IPEN = BIT_SET;                 //输入通道使能
   \                     ??CrossCallReturnLabel_1:
   \   000016   B2D08000C008 BIS.W   #0x80, &0x8c0
     22              CB->IPSEL = CB0;                //输入通道选择
   \   00001C   38F00F00     AND.W   #0xf, R8
   \   000020   1F42C008     MOV.W   &0x8c0, R15
   \   000024   3FF0F0FF     AND.W   #0xfff0, R15
   \   000028   0FD8         BIS.W   R8, R15
   \   00002A   824FC008     MOV.W   R15, &0x8c0
     23              CB->CTL3 |= (1<<CB0);           //关闭输入缓存
   \   00002E   1F43         MOV.W   #0x1, R15
   \   000030   5A83         SUB.B   #0x1, R10
   \   000032   0230         JN      ??CompaterB_Init_6
   \   000034                RPT     R10
   \   000034   CA180F5F     RLAX.W  R15
   \                     ??CompaterB_Init_6:
   \   000038   5A53         ADD.B   #0x1, R10
   \   00003A   82DFC608     BIS.W   R15, &0x8c6
   \   00003E   053C         JMP     ??CompaterB_Init_1
     24            }
     25            else
     26            {
     27              CBCTL2 = 0u;
   \                     ??CompaterB_Init_5:
   \   000040   8243C408     MOV.W   #0x0, &0x8c4
     28              CB->RSEL = RESET;                   //参考电压应用到比较器+端        
   \   000044   B2C02000C408 BIC.W   #0x20, &0x8c4
     29            }
     30          
     31            if(CB1 <= CB_CH11)
   \                     ??CompaterB_Init_1:
   \   00004A   4B99         CMP.B   R9, R11
   \   00004C   1C2C         JC      ??CompaterB_Init_7
   \   00004E   484B         MOV.B   R11, R8
   \   000050   7B92         CMP.B   #0x8, R11
   \   000052   ........     CALLA   #?Subroutine0
     32            { //初始化引脚为第二功能
     33              GPIO_Init((CB1 < CB_CH8) ? P6 : P7, (CB1 < CB_CH8) ? CB1 : (CB1-8),GPI|SEL );
     34              CB->IMEN = BIT_SET;                 //输入通道使能
   \                     ??CrossCallReturnLabel_0:
   \   000056   B2D00080C008 BIS.W   #0x8000, &0x8c0
     35              CB->IMSEL = CB1;                //输入通道选择
   \   00005C   8810         SWPB    R8
   \   00005E   38F0000F     AND.W   #0xf00, R8
   \   000062   1F42C008     MOV.W   &0x8c0, R15
   \   000066   3FF0FFF0     AND.W   #0xf0ff, R15
   \   00006A   0FD8         BIS.W   R8, R15
   \   00006C   824FC008     MOV.W   R15, &0x8c0
     36              CB->CTL3 |= (1<<CB1);           //关闭输入缓存
   \   000070   1F43         MOV.W   #0x1, R15
   \   000072   5B83         SUB.B   #0x1, R11
   \   000074   0230         JN      ??CompaterB_Init_8
   \   000076                RPT     R11
   \   000076   CB180F5F     RLAX.W  R15
   \                     ??CompaterB_Init_8:
   \   00007A   5B53         ADD.B   #0x1, R11
   \   00007C   82DFC608     BIS.W   R15, &0x8c6
     37            }
     38            else
     39            {
     40              CB->RSEL = BIT_SET;                   //参考电压应用到比较器-端
     41            }
     42          
     43            if((CB0>=CB_VREF_1_5V) || (CB1>=CB_VREF_1_5V))  //如果有一端使用参考电压
   \   000080   4A99         CMP.B   R9, R10
   \   000082   042C         JC      ??CompaterB_Init_9
   \   000084   473C         JMP     ??CompaterB_Init_2
   \                     ??CompaterB_Init_7:
   \   000086   B2D02000C408 BIS.W   #0x20, &0x8c4
     44            {
     45              CB->MRVS = 0;
   \                     ??CompaterB_Init_9:
   \   00008C   B2C00010C208 BIC.W   #0x1000, &0x8c2
     46              if((CB0==CB_VREF_VCC) || (CB1==CB_VREF_VCC))
   \   000092   7A900F00     CMP.B   #0xf, R10
   \   000096   0324         JEQ     ??CompaterB_Init_10
   \   000098   7B900F00     CMP.B   #0xf, R11
   \   00009C   0C20         JNE     ??CompaterB_Init_11
     47              {
     48                CB->REFL = 0;
   \                     ??CompaterB_Init_10:
   \   00009E   B2F0FF9FC408 AND.W   #0x9fff, &0x8c4
     49                CB->RS = 1;                                                    //外部参考电压禁止,使用Vcc作为参考电压源
   \   0000A4   1F42C408     MOV.W   &0x8c4, R15
   \   0000A8   3FF03FFF     AND.W   #0xff3f, R15
   \   0000AC   3FD04000     BIS.W   #0x40, R15
   \   0000B0   824FC408     MOV.W   R15, &0x8c4
   \   0000B4   293C         JMP     ??CompaterB_Init_3
     50              }
     51              else if((CB0==CB_VREF_1_5V) || (CB1==CB_VREF_1_5V)) //
   \                     ??CompaterB_Init_11:
   \   0000B6   4A99         CMP.B   R9, R10
   \   0000B8   0224         JEQ     ??CompaterB_Init_12
   \   0000BA   4B99         CMP.B   R9, R11
   \   0000BC   0720         JNE     ??CompaterB_Init_13
     52              {
     53                CB->REFL = 1;
   \                     ??CompaterB_Init_12:
   \   0000BE   1F42C408     MOV.W   &0x8c4, R15
   \   0000C2   3FF0FF9F     AND.W   #0x9fff, R15
   \   0000C6   3FD00020     BIS.W   #0x2000, R15
   \   0000CA   0C3C         JMP     ??CompaterB_Init_4
     54                CB->RS = 3;
     55                CB->REFACC = RESET;                                                //参考电压为1.5v,使用外部参考电压分压
     56              }
     57              else if((CB0==CB_VREF_2_0V) || (CB1==CB_VREF_2_0V)) //
   \                     ??CompaterB_Init_13:
   \   0000CC   7A900D00     CMP.B   #0xd, R10
   \   0000D0   0324         JEQ     ??CompaterB_Init_14
   \   0000D2   7B900D00     CMP.B   #0xd, R11
   \   0000D6   0920         JNE     ??CompaterB_Init_15
     58              {
     59                CB->REFL = 2;
   \                     ??CompaterB_Init_14:
   \   0000D8   1F42C408     MOV.W   &0x8c4, R15
   \   0000DC   3FF0FF9F     AND.W   #0x9fff, R15
   \   0000E0   3FD00040     BIS.W   #0x4000, R15
   \                     ??CompaterB_Init_4:
   \   0000E4   824FC408     MOV.W   R15, &0x8c4
     60                CB->RS = 3;
   \   0000E8   093C         JMP     ??CompaterB_Init_0
     61                CB->REFACC = RESET;                                                //参考电压为2.0v,使用外部参考电压分压
     62              }
     63              else if((CB0==CB_VREF_2_5V) || (CB1==CB_VREF_2_5V)) //
   \                     ??CompaterB_Init_15:
   \   0000EA   7A900E00     CMP.B   #0xe, R10
   \   0000EE   0324         JEQ     ??CompaterB_Init_16
   \   0000F0   7B900E00     CMP.B   #0xe, R11
   \   0000F4   0920         JNE     ??CompaterB_Init_3
     64              {
     65                CB->REFL = 3;
   \                     ??CompaterB_Init_16:
   \   0000F6   B2D00060C408 BIS.W   #0x6000, &0x8c4
     66                CB->RS = 3;
   \                     ??CompaterB_Init_0:
   \   0000FC   B2D0C000C408 BIS.W   #0xc0, &0x8c4
     67                CB->REFACC = RESET;                                               //参考电压为2.5v,使用外部参考电压分压
   \   000102   B2C00080C408 BIC.W   #0x8000, &0x8c4
     68              }
     69              CB->REF0 = 31;
   \                     ??CompaterB_Init_3:
   \   000108   B2D01F00C408 BIS.W   #0x1f, &0x8c4
     70              CB->REF1 = 31;
   \   00010E   B2D0001FC408 BIS.W   #0x1f00, &0x8c4
     71            }
     72          
     73            CB->PWRMD = 1;                             //正常电源模式 
   \                     ??CompaterB_Init_2:
   \   000114   1F42C208     MOV.W   &0x8c2, R15
   \   000118   3FF0FFFC     AND.W   #0xfcff, R15
   \   00011C   3FD00001     BIS.W   #0x100, R15
   \   000120   824FC208     MOV.W   R15, &0x8c2
     74            CB->ON = BIT_SET;                              // 打开比较器B  
   \   000124   B2D00004C208 BIS.W   #0x400, &0x8c2
     75          }
   \   00012A   3816         POPM.A  #0x4, R11
   \   00012C   1001         RETA
   \   00012E                REQUIRE _A_CBCTL2_L

   \                                 In  segment CODE, align 2
   \                     ?Subroutine0:
   \   000000   4C7C         SUBC.B  R12, R12
   \   000002   7C500600     ADD.B   #0x6, R12
   \   000006   3E400101     MOV.W   #0x101, R14
   \   00000A   0D48         MOV.W   R8, R13
   \   00000C   ........     BRA     #GPIO_MultiBits_Init
     76          /*******************************************************************************
     77          *  函数名称: CompaterB_ExchangeChanel(STATUS status)  
     78          *  功能说明：交换输入通道极性
     79          *  参数说明：STATUS status：是否交换极性
     80          *  函数返回：无
     81          *  使用示例：CompaterB_ExchangeChanel(DISABLE);   //禁止交换比较器输入通道   
     82          ********************************************************************************/

   \                                 In  segment CODE, align 2
     83          void  CompaterB_ExchangeChanel(STATUS status)                                      
   \                     CompaterB_ExchangeChanel:
     84          {
     85            CB->EX = status;
   \   000000   5CB3         BIT.B   #0x1, R12
   \   000002   0420         JNE     ??CompaterB_ExchangeChanel_0
   \   000004   B2C02000C208 BIC.W   #0x20, &0x8c2
   \   00000A   1001         RETA
   \                     ??CompaterB_ExchangeChanel_0:
   \   00000C   B2D02000C208 BIS.W   #0x20, &0x8c2
     86          }
   \   000012   1001         RETA
     87          /*******************************************************************************
     88          *  函数名称：CompatorB_GetValue(void)
     89          *  功能说明：读取比较的结果
     90          *  参数说明：无
     91          *  函数返回：STATUS :BIT_SET 正输入端电压大于负输入端电压，RESET 正输入端电压小于于负输入端电压
     92          *  使用示例：
     93          ********************************************************************************/

   \                                 In  segment CODE, align 2
     94          STATUS CompatorB_GetValue(void)
   \                     CompatorB_GetValue:
     95          {
     96            return ((CB->CB_OUT) ? BIT_SET : RESET);
   \   000000   1C42C208     MOV.W   &0x8c2, R12
   \   000004   5CF3         AND.B   #0x1, R12
   \   000006   1001         RETA
     97          }
     98          /*******************************************************************************
     99          *  函数名称: CompaterB_ITConfig (CompaterB_IRQn irqn, STATUS ITState)
    100          *  功能说明：设置中断是否使能并配置中断触发沿
    101          *  参数说明：CompaterB_IRQn irqn:选择为上升沿还是下降沿中断
    102                       BOOL ITState       :是否使能中断
    103          *  函数返回：无
    104          *  使用示例：CompaterB_ITConfig (CB_RaisingIRQn, ENABLE);  //比较器设置为上升沿中断，并使能中断
    105          ********************************************************************************/

   \                                 In  segment CODE, align 2
    106          void CompaterB_ITConfig (CompaterB_IRQn irqn, STATUS ITState)
   \                     CompaterB_ITConfig:
    107          {
    108            CB->IES = RESET;                 //上升沿CBIFG，下降沿CBIIFG
   \   000000   B2C2C208     BIC.W   #0x8, &0x8c2
    109            if(ITState != DISABLE)//设置是否允许中断
   \   000004   4E4C         MOV.B   R12, R14
   \   000006   7EE3         XOR.B   #0xff, R14
   \   000008   4D93         CMP.B   #0x0, R13
   \   00000A   0524         JEQ     ??CompaterB_ITConfig_0
    110            {
    111              CB->CB_IFG &=~irqn;              //清中断标志位
   \   00000C   C2FECC08     AND.B   R14, &0x8cc
    112              CB->CB_IE  |= irqn;
   \   000010   C2DCCD08     BIS.B   R12, &0x8cd
   \   000014   1001         RETA
    113            }
    114            else
    115            {
    116              CB->CB_IE  &=~irqn;
   \                     ??CompaterB_ITConfig_0:
   \   000016   C2FECD08     AND.B   R14, &0x8cd
    117            }                      
    118          }
   \   00001A   1001         RETA
    119          /*******************************************************************************
    120          *  函数名称：CompaterB_GetITStatus(CompaterB_IRQn irqn)
    121          *  功能说明：读取比较中断标志状态
    122          *  参数说明：CompaterB_IRQn irqn:选择为上升沿还是下降沿中断标志
    123          *  函数返回：STATUS ：中断标志是否置位
    124          *  使用示例：if(TRUE == CompaterB_GetITStatus(CB_RaisingIRQn)){...} //判断中断标志是否置位
    125          ********************************************************************************/

   \                                 In  segment CODE, align 2
    126          STATUS  CompaterB_GetITStatus(CompaterB_IRQn irqn)
   \                     CompaterB_GetITStatus:
    127          {
    128            return ((CB->CB_IFG & irqn) ? TRUE : FALSE);
   \   000000   5E42CC08     MOV.B   &0x8cc, R14
   \   000004   4EBC         BIT.B   R12, R14
   \   000006   0220         JNE     ??CompaterB_GetITStatus_0
   \   000008   4C43         MOV.B   #0x0, R12
   \   00000A   1001         RETA
   \                     ??CompaterB_GetITStatus_0:
   \   00000C   5C43         MOV.B   #0x1, R12
   \   00000E   1001         RETA
    129          }
    130          /*******************************************************************************
    131          *  函数名称：CompaterB_ClearITPendingBit(CompaterB_IRQn irqn)
    132          *  功能说明：清除比较中断标志位
    133          *  参数说明：CompaterB_IRQn irqn:选择为上升沿还是下降沿中断标志
    134          *  函数返回：无
    135          *  使用示例：CompaterB_ClearITPendingBit(CB_RaisingIRQn);   //清除上升沿中断标志
    136          ********************************************************************************/

   \                                 In  segment CODE, align 2
    137          void  CompaterB_ClearITPendingBit(CompaterB_IRQn irqn)
   \                     CompaterB_ClearITPendingBit:
    138          {
    139            CB->CB_IFG &=~ irqn;
   \   000000   C2CCCC08     BIC.B   R12, &0x8cc
    140          }
   \   000004   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   CompaterB_ClearITPendingBit
      4   CompaterB_ExchangeChanel
      4   CompaterB_GetITStatus
      4   CompaterB_ITConfig
     20   CompaterB_Init
       20   -> GPIO_MultiBits_Init
      4   CompatorB_GetValue


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?Subroutine0
       4  CB
       6  CompaterB_ClearITPendingBit
      20  CompaterB_ExchangeChanel
      16  CompaterB_GetITStatus
      28  CompaterB_ITConfig
     302  CompaterB_Init
       8  CompatorB_GetValue
       2  _A_CBCTL2_L

 
 396 bytes in segment CODE
   2 bytes in segment DATA16_AN
   4 bytes in segment DATA20_C
 
 396 bytes of CODE  memory
   4 bytes of CONST memory
   0 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
