///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.10.1.973/W32 for MSP430          02/Aug/2021  17:19:12
// Copyright 1996-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  D:\Dev\IAR\5529_MPU6050\HardWare\LED\LED.c
//    Command line  =  
//        -f C:\Users\Jeans\AppData\Local\Temp\EW8D26.tmp
//        (D:\Dev\IAR\5529_MPU6050\HardWare\LED\LED.c -D NDEBUG -D RAM_VECTOR
//        -lC D:\Dev\IAR\5529_MPU6050\Release\List -lA
//        D:\Dev\IAR\5529_MPU6050\Release\List -o
//        D:\Dev\IAR\5529_MPU6050\Release\Obj --debug -D__MSP430F5529__ -e
//        --double=32 --dlib_config D:\Dev\IAR\430\lib\dlib\dl430xllfn.h -I
//        D:\Dev\IAR\5529_MPU6050\ -I D:\Dev\IAR\5529_MPU6050\Drivers\inc\ -I
//        D:\Dev\IAR\5529_MPU6050\Drivers\src\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\led\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\key\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\lcd\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\lcd_api\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\nrf24l01\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\oled\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\delay\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\2.2TFT\ -I
//        D:\Dev\IAR\5529_MPU6050\System\ -I
//        D:\Dev\IAR\5529_MPU6050\System\inc\ -I
//        D:\Dev\IAR\5529_MPU6050\System\src\ -I D:\Dev\IAR\5529_MPU6050\User\
//        -I D:\Dev\IAR\5529_MPU6050\User\USER\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\mpu6050\ --core=430X
//        --data_model=large -Oh --multiplier=32 --hw_workaround=CPU40
//        --hw_workaround=nop_after_lpm -DNDEBUG --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  D:\Dev\IAR\5529_MPU6050\Release\List\LED.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME LED

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC LED_Init
        PUBLIC LED_Off
        PUBLIC LED_On
        PUBLIC LED_PIN
        PUBLIC LED_SetStatus
        PUBLIC LED_Turn
        PUBLIC LED_Water_Lights
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L SameValue
          CFI R12H SameValue
          CFI R12 Concat
          CFI R13L SameValue
          CFI R13H SameValue
          CFI R13 Concat
          CFI R14L SameValue
          CFI R14H SameValue
          CFI R14 Concat
          CFI R15L SameValue
          CFI R15H SameValue
          CFI R15 Concat
          CFI EndCommon cfiCommon1
        
        EXTERN GPIO_WriteBit
        EXTERN GPIO_MultiBits_Init
        EXTERN GPIO_TurnBit

// D:\Dev\IAR\5529_MPU6050\HardWare\LED\LED.c
//    1 #include "led.h"
//    2 #include "msp430f5529_gpio.h"
//    3 #include "msp430f5529_system.h"
//    4 //定义LED引脚

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
//    5 const GPIO_PIN LED_PIN[LED_NUM]=
LED_PIN:
        DATA8
        DC8 0, 0, 3, 7

        RSEG `CODE`:CODE:NOROOT(1)
LED_Off:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function LED_Off
          CFI NoCalls
        CMP.B   #0x2, R12
        JNE     ??LED_Off_0
        MOV.B   #0x0, R14
        CALLA   #?Subroutine5
??CrossCallReturnLabel_9:
        MOV.B   #0x0, R14
        JMP     ?Subroutine1
??LED_Off_0:
        MOV.B   R12, R12
        ADDA    R12, R12
        MOVA    R12, R15
        MOV.B   #0x0, R14
        JMP     ?Subroutine0
          CFI EndBlock cfiBlock0

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine1:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
        CALLA   #?Subroutine4
??CrossCallReturnLabel_6:
          CFI TailCall LED_Off GPIO_WriteBit
          CFI TailCall LED_On GPIO_WriteBit
        BRA     #GPIO_WriteBit
          CFI EndBlock cfiBlock1

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine4:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function LED_Off
          CFI Conditional ??CrossCallReturnLabel_6
          CFI CFA SP+8
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function LED_On
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond3) CFA SP+8
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function LED_SetStatus
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond4) R10L Frame(CFA, -8)
          CFI (cfiCond4) R10H Frame(CFA, -6)
          CFI (cfiCond4) CFA SP+12
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function LED_Turn
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond5) CFA SP+8
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function LED_Water_Lights
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond6) CFA SP+8
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        MOV.B   #0x7, R13
        MOV.B   #0x3, R12
        RETA
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine0:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI NoFunction
        CALLA   #?Subroutine2
??CrossCallReturnLabel_1:
          CFI TailCall LED_Off GPIO_WriteBit
          CFI TailCall LED_On GPIO_WriteBit
        BRA     #GPIO_WriteBit
          CFI EndBlock cfiBlock8
//    6 {
//    7   {LED1_PORT,LED1_PIN},
//    8   {LED2_PORT,LED2_PIN},
//    9 };//LED引脚
//   10 /*******************************************************************************
//   11 *  函数名称：LED_Init( LEDn led )
//   12 *  功能说明：LED灯初始化
//   13 *  参数说明：LEDn led :LED（LED0,LED1...）
//   14 *  函数返回：无
//   15 *  使用示例：LED_Init( LED0 );   //初始化LED0
//   16 ********************************************************************************/

        RSEG `CODE`:CODE:NOROOT(1)
//   17 void LED_Init( LEDn led )
LED_Init:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function LED_Init
//   18 {
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOV.B   R12, R10
//   19   if(led == LED_ALL)
        CMP.B   #0x2, R12
        JNE     ??LED_Init_1
//   20   {
//   21     for(led = LED1;led < LED_NUM;led++)
//   22     {
//   23       GPIO_Init(LED_PIN[led].Port, LED_PIN[led].Pin, GPO);
        MOV.W   #0x2, R14
        MOV.W   #0x1, R13
        MOV.B   #0x0, R12
          CFI FunCall GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
        MOV.W   #0x2, R14
        MOV.W   #0x80, R13
        MOV.B   #0x3, R12
        JMP     ??LED_Init_0
//   24     }
//   25   }
//   26   else
//   27   {
//   28     GPIO_Init(LED_PIN[led].Port, LED_PIN[led].Pin, GPO);
??LED_Init_1:
        MOV.B   R12, R15
        ADDA    R15, R15
        MOV.W   #0x2, R14
        MOV.W   #0x1, R13
        MOVX.B  LED_PIN + 1(R15), R12
        SUB.B   #0x1, R12
        JN      ??LED_Init_2
        RPT     R12
        RLAX.W  R13
??LED_Init_2:
        MOVX.B  LED_PIN(R15), R12
??LED_Init_0:
          CFI FunCall GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
//   29   }
//   30   LED_Off (led);
        MOV.B   R10, R12
          CFI FunCall LED_Off
        CALLA   #LED_Off
//   31 }
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock9
//   32 /*******************************************************************************
//   33 *  函数名称：LED_SetStatus(LEDn led,STATUS status)
//   34 *  功能说明：设置LED状态
//   35 *  参数说明：LEDn led      :LED（LED1,LED2...）
//   36              STATUS status :设置是否点亮LED
//   37 *  函数返回：无
//   38 *  使用示例：LED_SetStatus(LED1,SET);  //LED1亮
//   39 ********************************************************************************/

        RSEG `CODE`:CODE:NOROOT(1)
//   40 void LED_SetStatus(LEDn led,STATUS status)
LED_SetStatus:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function LED_SetStatus
//   41 {
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOV.B   R13, R10
//   42   status = (LED_ON == BIT_SET) ? status : (STATUS)!status;
//   43   
//   44   if(led == LED_ALL)
        CMP.B   #0x2, R12
        JNE     ??LED_SetStatus_1
//   45   {
//   46     for(led = LED1;led < LED_NUM;led++)
//   47     {
//   48       GPIO_WriteBit(LED_PIN[led].Port, LED_PIN[led].Pin, status);
        MOV.B   R13, R14
        CALLA   #?Subroutine5
??CrossCallReturnLabel_8:
        MOV.B   R10, R14
        CALLA   #?Subroutine4
//   49     }
//   50   }
??CrossCallReturnLabel_3:
        JMP     ??LED_SetStatus_0
//   51   else
//   52   {
//   53     GPIO_WriteBit(LED_PIN[led].Port, LED_PIN[led].Pin, status);
??LED_SetStatus_1:
        MOV.B   R12, R12
        ADDA    R12, R12
        MOVA    R12, R15
        MOV.B   R13, R14
        CALLA   #?Subroutine2
//   54   }
??LED_SetStatus_0:
          CFI FunCall GPIO_WriteBit
        CALLA   #GPIO_WriteBit
//   55 }
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock10

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine5:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function LED_Off
          CFI Conditional ??CrossCallReturnLabel_9
          CFI CFA SP+8
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function LED_SetStatus
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond12) R10L Frame(CFA, -8)
          CFI (cfiCond12) R10H Frame(CFA, -6)
          CFI (cfiCond12) CFA SP+12
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function LED_On
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond13) CFA SP+8
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
//   56 /*******************************************************************************
//   57 *  函数名称：LED_Off (LEDn led)
//   58 *  功能说明：关闭lED
//   59 *  参数说明：LEDn led      :LED（LED1,LED2...）
//   60 *  函数返回：无
//   61 *  使用示例：LED_Off(LED1);  //LED1灭
//   62 ********************************************************************************/
//   63 void LED_Off (LEDn led)
//   64 {
//   65   if(led == LED_ALL)
//   66   {
//   67     for(led = LED1;led < LED_NUM;led++)
//   68     {
//   69       GPIO_WriteBit(LED_PIN[led].Port, LED_PIN[led].Pin, LED_OFF);
        MOV.B   #0x0, R13
        MOV.B   #0x0, R12
          CFI (cfiCond11) TailCall LED_Off GPIO_WriteBit
          CFI (cfiCond12) TailCall LED_SetStatus GPIO_WriteBit
          CFI (cfiCond13) TailCall LED_On GPIO_WriteBit
        BRA     #GPIO_WriteBit
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14
//   70     }
//   71   }
//   72   else
//   73   {
//   74     GPIO_WriteBit(LED_PIN[led].Port, LED_PIN[led].Pin, LED_OFF);
//   75   }
//   76 }
//   77 /*******************************************************************************
//   78 *  函数名称：LED_On  (LEDn led)
//   79 *  功能说明：灯亮
//   80 *  参数说明：LEDn led      :LED（LED1,LED2...）
//   81 *  函数返回：无
//   82 *  使用示例：LED_On(LED0);  //LED0亮
//   83 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   84 void LED_On  (LEDn led)
LED_On:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function LED_On
          CFI NoCalls
//   85 {
//   86   if(led == LED_ALL)
        CMP.B   #0x2, R12
        JNE     ??LED_On_0
//   87   {
//   88     for(led = LED1;led < LED_NUM;led++)
//   89     {
//   90       GPIO_WriteBit(LED_PIN[led].Port, LED_PIN[led].Pin, LED_ON);
        MOV.B   #0x1, R14
        CALLA   #?Subroutine5
??CrossCallReturnLabel_7:
        MOV.B   #0x1, R14
        JMP     ?Subroutine1
//   91     }
//   92   }
//   93   else
//   94   {
//   95     GPIO_WriteBit(LED_PIN[led].Port, LED_PIN[led].Pin, LED_ON);
??LED_On_0:
        MOV.B   R12, R12
        ADDA    R12, R12
        MOVA    R12, R15
        MOV.B   #0x1, R14
        JMP     ?Subroutine0
        NOP
//   96   }
//   97 }
          CFI EndBlock cfiBlock15

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine2:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function LED_Off
          CFI Conditional ??CrossCallReturnLabel_1
          CFI CFA SP+8
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function LED_On
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond17) CFA SP+8
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function LED_SetStatus
          CFI (cfiCond18) Conditional ??LED_SetStatus_0
          CFI (cfiCond18) R10L Frame(CFA, -8)
          CFI (cfiCond18) R10H Frame(CFA, -6)
          CFI (cfiCond18) CFA SP+12
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function LED_Turn
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_0
          CFI (cfiCond19) CFA SP+8
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        MOVX.B  LED_PIN + 1(R12), R13
        MOVX.B  LED_PIN(R15), R12
        RETA
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20
//   98 /*******************************************************************************
//   99 *  函数名称：LED_Turn(LEDn led)
//  100 *  功能说明：灯翻转
//  101 *  参数说明：LEDn led      :LED（LED1,LED2...）
//  102 *  函数返回：无
//  103 *  使用示例：LED_Turn(LED0);  //LED0输出翻转
//  104 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  105 void LED_Turn(LEDn led)
LED_Turn:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function LED_Turn
//  106 {
//  107   if(led == LED_ALL)
        CMP.B   #0x2, R12
        JNE     ??LED_Turn_0
//  108   {
//  109     for(led = LED1;led < LED_NUM;led++)
//  110     {
//  111       GPIO_TurnBit(LED_PIN[led].Port, LED_PIN[led].Pin);
        MOV.B   #0x0, R13
        MOV.B   #0x0, R12
          CFI FunCall GPIO_TurnBit
        CALLA   #GPIO_TurnBit
        CALLA   #?Subroutine4
//  112     }
//  113   }
??CrossCallReturnLabel_4:
          CFI TailCall GPIO_TurnBit
        BRA     #GPIO_TurnBit
//  114   else
//  115   {
//  116     GPIO_TurnBit(LED_PIN[led].Port, LED_PIN[led].Pin);
??LED_Turn_0:
        MOV.B   R12, R12
        ADDA    R12, R12
        MOVA    R12, R15
        CALLA   #?Subroutine2
//  117   }
??CrossCallReturnLabel_0:
          CFI TailCall GPIO_TurnBit
        BRA     #GPIO_TurnBit
//  118 }
          CFI EndBlock cfiBlock21
//  119 /*******************************************************************************
//  120 *  函数名称：water_lights(void)
//  121 *  功能说明：流水灯
//  122 *  参数说明：无
//  123 *  函数返回：无
//  124 *  使用示例：water_lights(); //流水灯亮一次
//  125 ********************************************************************************/

        RSEG `CODE`:CODE:NOROOT(1)
//  126 void LED_Water_Lights(void)
LED_Water_Lights:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function LED_Water_Lights
          CFI NoCalls
//  127 {
//  128   for(LEDn led = LED1;led < LED_NUM;led++)
//  129   {
//  130     LED_Turn(led);
        MOV.B   #0x0, R13
        MOV.B   #0x0, R12
        CALLA   #?Subroutine3
//  131     DELAY_MS(500);
??CrossCallReturnLabel_2:
        CALLA   #?Subroutine4
//  132   }
??CrossCallReturnLabel_5:
          CFI EndBlock cfiBlock22
        REQUIRE ?Subroutine3
        // Fall through to label ?Subroutine3
//  133 }

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine3:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function LED_Water_Lights
          CFI Conditional ??CrossCallReturnLabel_2
          CFI CFA SP+8
          CFI Block cfiBlock24 Using cfiCommon0
          CFI (cfiBlock24) NoFunction
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
          CFI (cfiCond23) FunCall LED_Water_Lights GPIO_TurnBit
          CFI (cfiCond23) FunCall LED_Water_Lights GPIO_TurnBit
        CALLA   #GPIO_TurnBit
        ////////////// Start of 12500000 cycles delay.
        MOV.W   #0xaf06, R15
        MOV.W   #0x2f, R14
??Subroutine3_1:
        ADD.W   #0xffff, R15
        ADDC.W  #0xffff, R14
        JC      ??Subroutine3_1
        ////////////// End of delay code.
        RETA
          CFI EndBlock cfiCond23
          CFI EndBlock cfiBlock24
          CFI EndBlock cfiPicker25

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 278 bytes in segment CODE
//   4 bytes in segment DATA20_C
// 
// 278 bytes of CODE  memory
//   4 bytes of CONST memory
//
//Errors: none
//Warnings: none
