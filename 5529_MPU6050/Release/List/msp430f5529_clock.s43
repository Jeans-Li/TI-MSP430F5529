///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.10.1.973/W32 for MSP430          02/Aug/2021  17:19:14
// Copyright 1996-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  D:\Dev\IAR\5529_MPU6050\Drivers\src\msp430f5529_clock.c
//    Command line  =  
//        -f C:\Users\Jeans\AppData\Local\Temp\EW9289.tmp
//        (D:\Dev\IAR\5529_MPU6050\Drivers\src\msp430f5529_clock.c -D NDEBUG -D
//        RAM_VECTOR -lC D:\Dev\IAR\5529_MPU6050\Release\List -lA
//        D:\Dev\IAR\5529_MPU6050\Release\List -o
//        D:\Dev\IAR\5529_MPU6050\Release\Obj --debug -D__MSP430F5529__ -e
//        --double=32 --dlib_config D:\Dev\IAR\430\lib\dlib\dl430xllfn.h -I
//        D:\Dev\IAR\5529_MPU6050\ -I D:\Dev\IAR\5529_MPU6050\Drivers\inc\ -I
//        D:\Dev\IAR\5529_MPU6050\Drivers\src\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\led\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\key\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\lcd\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\lcd_api\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\nrf24l01\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\oled\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\delay\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\2.2TFT\ -I
//        D:\Dev\IAR\5529_MPU6050\System\ -I
//        D:\Dev\IAR\5529_MPU6050\System\inc\ -I
//        D:\Dev\IAR\5529_MPU6050\System\src\ -I D:\Dev\IAR\5529_MPU6050\User\
//        -I D:\Dev\IAR\5529_MPU6050\User\USER\ -I
//        D:\Dev\IAR\5529_MPU6050\HardWare\mpu6050\ --core=430X
//        --data_model=large -Oh --multiplier=32 --hw_workaround=CPU40
//        --hw_workaround=nop_after_lpm -DNDEBUG --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\Dev\IAR\5529_MPU6050\Release\List\msp430f5529_clock.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME msp430f5529_clock

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?ShiftLeft64_6
        EXTERN ?ShiftRight32u
        EXTERN __iar_HWMUL
        EXTERN _Cast32uto32f
        EXTERN _Div32f
        EXTERN ?FLT_LT
        EXTERN ?DivMod32u
        EXTERN ?DivMod16u
        EXTERN _Add32f
        EXTERN _Cast32fto32s
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC CLOCK_ACLK_Config
        PUBLIC CLOCK_DCO_PLLConfig
        PUBLIC CLOCK_MCLK_Config
        PUBLIC CLOCK_SMCLK_Config
        PUBLIC UCS
        PUBWEAK _A_PMMCTL0_L
        PUBWEAK _A_PMMIFG_L
        PUBWEAK _A_SFRIFG1_L
        PUBWEAK _A_SVSMHCTL_L
        PUBWEAK _A_SVSMLCTL_L
        PUBLIC g_sClock
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L SameValue
          CFI R12H SameValue
          CFI R12 Concat
          CFI R13L SameValue
          CFI R13H SameValue
          CFI R13 Concat
          CFI R14L SameValue
          CFI R14H SameValue
          CFI R14 Concat
          CFI R15L SameValue
          CFI R15H SameValue
          CFI R15 Concat
          CFI EndCommon cfiCommon1
        
        EXTERN GPIO_MultiBits_Init

// D:\Dev\IAR\5529_MPU6050\Drivers\src\msp430f5529_clock.c
//    1 #include "msp430f5529_clock.h"

        ASEGN DATA16_AN:DATA:NOROOT,0120H
// union <unnamed> __data16 _A_PMMCTL0_L
_A_PMMCTL0_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0124H
// union <unnamed> __data16 _A_SVSMHCTL_L
_A_SVSMHCTL_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0126H
// union <unnamed> __data16 _A_SVSMLCTL_L
_A_SVSMLCTL_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,012cH
// union <unnamed> __data16 _A_PMMIFG_L
_A_PMMIFG_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0102H
// union <unnamed> __data16 _A_SFRIFG1_L
_A_SFRIFG1_L:
        DS8 2
//    2 
//    3 #ifndef EXTAL_IN_XT1_HZ
//    4 #error 没有宏定义"XT1_nHZ",请在clock.h里宏定义，如#define EXTAL_IN_XT1_HZ  32768HZ
//    5 #endif  
//    6 #ifndef EXTAL_IN_XT2_HZ
//    7 #error 没有宏定义"XT2_nHZ",请在clock.h里宏定义，如#define EXTAL_IN_XT2_HZ  4000000HZ
//    8 #endif
//    9 

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//   10 const UCS_MemMapPtr UCS = UCS_BASE_PTR;
UCS:
        DATA32
        DC32 160H

        RSEG DATA20_N:DATA:SORT:NOROOT(1)
//   11 __no_init CLOCK g_sClock;                                        //全局变量，时钟频率
g_sClock:
        DS8 40
//   12 static void SetVcoreUp (uint8_t level);                          //设置内核电压
//   13 /*******************************************************************************
//   14 *  函数名称：XT1_Config(STATUS status)
//   15 *  功能说明：设置是否使能XT1
//   16 *  参数说明：STATUS status：是否使能XT1
//   17 *  函数返回：无
//   18 *  使用示例：XT1_Config(ENABLE);   //使能XT1
//   19 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   20 static inline void XT1_Config(STATUS status)
XT1_Config:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function XT1_Config
          CFI NoCalls
//   21 {
//   22   if(status != DISABLE)
        CMP.B   #0x0, R12
        JEQ     ??XT1_Config_2
//   23   {
//   24     if(UCS->XT1_OFF == BIT_SET)
        BIT.B   #0x1, &0x16c
        JEQ     ??XT1_Config_1
//   25     {
//   26       GPIO_MultiBits_Init(P5,(GPIO_Pin_4|GPIO_Pin_5),GPI|SEL);   //选用 XT1 第二功能
        CALLA   #?Subroutine1
//   27       UCS->XT1_OFF = RESET ;                          // 开启 XT1                       
//   28       do
//   29       {
//   30         UCS->XT1_LFOFFG = RESET;                     // 清除XT1,CLOCK_DCO 失效标志                     
??XT1_Config_0:
        CALLA   #?Subroutine3
//   31         SFRIFG1 &= ~OFIFG;                           // 
//   32       }while (UCS->XT1_LFOFFG == BIT_SET);               //
//   33     }
//   34   }
??CrossCallReturnLabel_4:
        JEQ     ??XT1_Config_1
        JMP     ??XT1_Config_0
//   35   else
//   36   {
//   37     UCS->XT1_OFF = BIT_SET ;                          // 关闭 XT1                       
??XT1_Config_2:
        BIS.B   #0x1, &0x16c
//   38   }
//   39 }
??XT1_Config_1:
        RETA
          CFI EndBlock cfiBlock0
        REQUIRE _A_SFRIFG1_L

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine3:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function XT1_Config
          CFI Conditional ??CrossCallReturnLabel_4
          CFI CFA SP+8
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function CLOCK_ACLK_Config
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond2) R10L Frame(CFA, -12)
          CFI (cfiCond2) R10H Frame(CFA, -10)
          CFI (cfiCond2) R11L Frame(CFA, -8)
          CFI (cfiCond2) R11H Frame(CFA, -6)
          CFI (cfiCond2) CFA SP+16
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        BIC.B   #0x2, &0x16e
        BIC.W   #0x2, &0x102
        BIT.B   #0x2, &0x16e
        RETA
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine1:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function XT1_Config
          CFI Conditional ??XT1_Config_0
          CFI CFA SP+8
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function CLOCK_ACLK_Config
          CFI (cfiCond5) Conditional ??CLOCK_ACLK_Config_0
          CFI (cfiCond5) R10L Frame(CFA, -12)
          CFI (cfiCond5) R10H Frame(CFA, -10)
          CFI (cfiCond5) R11L Frame(CFA, -8)
          CFI (cfiCond5) R11H Frame(CFA, -6)
          CFI (cfiCond5) CFA SP+16
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        MOV.W   #0x101, R14
        MOV.W   #0x30, R13
        MOV.B   #0x4, R12
          CFI (cfiCond4) FunCall XT1_Config GPIO_MultiBits_Init
          CFI (cfiCond5) FunCall CLOCK_ACLK_Config GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
        BIC.B   #0x1, &0x16c
        RETA
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6
//   40 /*******************************************************************************
//   41 *  函数名称：XT2_Config(STATUS status)
//   42 *  功能说明：设置是否使能XT2
//   43 *  参数说明：STATUS status：是否使能XT2
//   44 *  函数返回：无
//   45 *  使用示例：XT2_Config(TRUE);   //使能XT2
//   46 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   47 static inline void XT2_Config(STATUS status)
XT2_Config:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function XT2_Config
//   48 {
//   49   if(status != DISABLE)
        CMP.B   #0x0, R12
        JEQ     ??XT2_Config_2
//   50   {
//   51     if(UCS->XT2_OFF == BIT_SET)
        BIT.B   #0x1, &0x16d
        JEQ     ??XT2_Config_1
//   52     {
//   53       GPIO_MultiBits_Init(P5,(GPIO_Pin_2|GPIO_Pin_3),GPI|SEL);      //选用 CLOCK_XT2 第二功能
        MOV.W   #0x101, R14
        MOV.W   #0xc, R13
        MOV.B   #0x4, R12
          CFI FunCall GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
//   54       UCS->XT2_OFF = RESET;                         //开启 CLOCK_XT2                      
        BIC.B   #0x1, &0x16d
//   55       do
//   56       {
//   57         UCS->XT2_OFFG = RESET;
??XT2_Config_0:
        BIC.B   #0x8, &0x16e
//   58         SFRIFG1 &= ~OFIFG;                       
        BIC.W   #0x2, &0x102
//   59       }while (UCS->XT2_OFFG == BIT_SET);
        BIT.B   #0x8, &0x16e
        JEQ     ??XT2_Config_1
        JMP     ??XT2_Config_0
//   60     }
//   61   }
//   62   else
//   63   {
//   64     UCS->XT2_OFF = BIT_SET ;                          // 关闭XT2                       
??XT2_Config_2:
        BIS.B   #0x1, &0x16d
//   65   }
//   66 }
??XT2_Config_1:
        RETA
          CFI EndBlock cfiBlock7
        REQUIRE _A_SFRIFG1_L
//   67 /*******************************************************************************
//   68 *  函数名称：CLOCK_DCO_PLLConfig     (FLLREF_Source refsource, FLLREF_DIVx refdiv, uint32_t DCO_FLL_Fre)
//   69 *  功能说明：设置DCO频率，单位（HZ）
//   70 *  参数说明：FLLREF_Source refsource :参考时钟源
//   71              FLLREF_DIVx refdiv      :参考时钟源分频系数
//   72              uint32_t DCO_FLL_Fre      :DCO设置频率
//   73 *  函数返回：无
//   74 *  使用示例：CLOCK_DCO_PLLConfig     (FLLREF_REFO, FLLREF_DIV_1, 16MHZ);  //设置DCO倍频环以REFO的一分频作为参考时钟源，倍频到16MHZ
//   75 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine11:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function CLOCK_ACLK_Config
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+16
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function CLOCK_SMCLK_Config
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond9) R10L Frame(CFA, -12)
          CFI (cfiCond9) R10H Frame(CFA, -10)
          CFI (cfiCond9) R11L Frame(CFA, -8)
          CFI (cfiCond9) R11H Frame(CFA, -6)
          CFI (cfiCond9) CFA SP+16
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function CLOCK_MCLK_Config
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond10) R10L Frame(CFA, -12)
          CFI (cfiCond10) R10H Frame(CFA, -10)
          CFI (cfiCond10) R11L Frame(CFA, -8)
          CFI (cfiCond10) R11H Frame(CFA, -6)
          CFI (cfiCond10) CFA SP+16
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function CLOCK_DCO_PLLConfig
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond11) R6L Frame(CFA, -28)
          CFI (cfiCond11) R6H Frame(CFA, -26)
          CFI (cfiCond11) R7L Frame(CFA, -24)
          CFI (cfiCond11) R7H Frame(CFA, -22)
          CFI (cfiCond11) R8L Frame(CFA, -20)
          CFI (cfiCond11) R8H Frame(CFA, -18)
          CFI (cfiCond11) R9L Frame(CFA, -16)
          CFI (cfiCond11) R9H Frame(CFA, -14)
          CFI (cfiCond11) R10L Frame(CFA, -12)
          CFI (cfiCond11) R10H Frame(CFA, -10)
          CFI (cfiCond11) R11L Frame(CFA, -8)
          CFI (cfiCond11) R11H Frame(CFA, -6)
          CFI (cfiCond11) CFA SP+32
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV.W   #0x900, R12
        MOV.W   #0x3d, R13
        RETA
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine5:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function CLOCK_ACLK_Config
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+16
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function CLOCK_ACLK_Config
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond14) R10L Frame(CFA, -12)
          CFI (cfiCond14) R10H Frame(CFA, -10)
          CFI (cfiCond14) R11L Frame(CFA, -8)
          CFI (cfiCond14) R11H Frame(CFA, -6)
          CFI (cfiCond14) CFA SP+16
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function CLOCK_MCLK_Config
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond15) R10L Frame(CFA, -12)
          CFI (cfiCond15) R10H Frame(CFA, -10)
          CFI (cfiCond15) R11L Frame(CFA, -8)
          CFI (cfiCond15) R11H Frame(CFA, -6)
          CFI (cfiCond15) CFA SP+16
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function CLOCK_MCLK_Config
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond16) R10L Frame(CFA, -12)
          CFI (cfiCond16) R10H Frame(CFA, -10)
          CFI (cfiCond16) R11L Frame(CFA, -8)
          CFI (cfiCond16) R11H Frame(CFA, -6)
          CFI (cfiCond16) CFA SP+16
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function CLOCK_DCO_PLLConfig
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond17) R6L Frame(CFA, -28)
          CFI (cfiCond17) R6H Frame(CFA, -26)
          CFI (cfiCond17) R7L Frame(CFA, -24)
          CFI (cfiCond17) R7H Frame(CFA, -22)
          CFI (cfiCond17) R8L Frame(CFA, -20)
          CFI (cfiCond17) R8H Frame(CFA, -18)
          CFI (cfiCond17) R9L Frame(CFA, -16)
          CFI (cfiCond17) R9H Frame(CFA, -14)
          CFI (cfiCond17) R10L Frame(CFA, -12)
          CFI (cfiCond17) R10H Frame(CFA, -10)
          CFI (cfiCond17) R11L Frame(CFA, -8)
          CFI (cfiCond17) R11H Frame(CFA, -6)
          CFI (cfiCond17) CFA SP+32
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        AND.B   #0xf8, R15
        BIS.B   R14, R15
        RETA
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   76 void CLOCK_DCO_PLLConfig     (FLLREF_Source refsource, FLLREF_DIVx refdiv, uint32_t DCO_FLL_Fre)
CLOCK_DCO_PLLConfig:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function CLOCK_DCO_PLLConfig
//   77 {
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.B   R12, R6
        MOV.B   R13, R9
        MOV.W   R14, R10
        MOV.W   R15, R11
//   78   static const uint16_t ref_div_value[6]={1,2,4,8,12,16};
//   79   /*根据频率提高内核电压*/
//   80   //SetVcoreUp ( (DCO_FLL_Fre < 12MHz) ? 0 : ((DCO_FLL_Fre < 16MHz) ? 1 : ((DCO_FLL_Fre < 20MHz) ? 2 :3))); //设置内核电压
//   81   if(DCO_FLL_Fre < 12MHz)
        CMP.W   #0xb7, R15
        JNC     ??CLOCK_DCO_PLLConfig_16
        JNE     ??CLOCK_DCO_PLLConfig_17
        CMP.W   #0x1b00, R14
        JC      ??CLOCK_DCO_PLLConfig_17
//   82     SetVcoreUp (0x00);                      //设置内核电压
??CLOCK_DCO_PLLConfig_16:
        MOV.B   #0x0, R12
        JMP     ??CLOCK_DCO_PLLConfig_10
//   83   else if(DCO_FLL_Fre < 16MHz)
??CLOCK_DCO_PLLConfig_17:
        CMP.W   #0xf4, R15
        JNC     ??CLOCK_DCO_PLLConfig_18
        JNE     ??CLOCK_DCO_PLLConfig_19
        CMP.W   #0x2400, R14
        JC      ??CLOCK_DCO_PLLConfig_19
//   84     SetVcoreUp (0x01);       
??CLOCK_DCO_PLLConfig_18:
        MOV.B   #0x1, R12
??CLOCK_DCO_PLLConfig_10:
          CFI FunCall SetVcoreUp
        CALLA   #SetVcoreUp
        JMP     ??CLOCK_DCO_PLLConfig_11
//   85   else if(DCO_FLL_Fre < 20MHz)
??CLOCK_DCO_PLLConfig_19:
        MOV.W   #0xc350, R8
        MOV.W   R14, R12
        MOV.W   R15, R13
        CALLA   #?Subroutine9
??CrossCallReturnLabel_23:
        MOV.B   #0xa5, &0x121
        JNC     ??CLOCK_DCO_PLLConfig_20
//   86     SetVcoreUp (0x02);       
        MOV.W   #0x4602, &0x124
        MOV.W   #0x4402, &0x126
        CALLA   #?Subroutine10
??CrossCallReturnLabel_25:
        MOV.B   #0x2, &0x120
        CALLA   #?Subroutine2
??CrossCallReturnLabel_2:
        MOV.W   #0x4602, &0x126
        JMP     ??CLOCK_DCO_PLLConfig_12
//   87   else
//   88     SetVcoreUp (0x03);       
??CLOCK_DCO_PLLConfig_20:
        MOV.W   #0x4703, &0x124
        MOV.W   #0x4403, &0x126
        CALLA   #?Subroutine10
??CrossCallReturnLabel_26:
        MOV.B   #0x3, &0x120
        CALLA   #?Subroutine2
??CrossCallReturnLabel_3:
        MOV.W   #0x4703, &0x126
??CLOCK_DCO_PLLConfig_12:
        MOV.B   #0x0, &0x121
//   89   
//   90   __bis_SR_register(SCG0);                                              // 禁止倍频环FLL,
??CLOCK_DCO_PLLConfig_11:
        BIS.W   #0x40, SR
        NOP
//   91   UCS->CTL0 = 0x0000;                                                   // 清零 DCOx, MODx
        MOV.W   #0x0, &0x160
//   92   
//   93   if (DCO_FLL_Fre < 0.63MHz)         //           fsystem < 0.63MHz
        CMP.W   #0x9, R11
        JNC     ??CLOCK_DCO_PLLConfig_21
        JNE     ??CLOCK_DCO_PLLConfig_22
        CMP.W   #0x9cf0, R10
        JC      ??CLOCK_DCO_PLLConfig_22
//   94 	UCS->DCORSEL = 0;
??CLOCK_DCO_PLLConfig_21:
        AND.B   #0x8f, &0x162
        JMP     ??CLOCK_DCO_PLLConfig_13
//   95   else if (DCO_FLL_Fre < 1.25MHz)    // 0.63MHz < fsystem < 1.25MHz
??CLOCK_DCO_PLLConfig_22:
        CMP.W   #0x13, R11
        JNC     ??CLOCK_DCO_PLLConfig_23
        JNE     ??CLOCK_DCO_PLLConfig_24
        CMP.W   #0x12d0, R10
        JC      ??CLOCK_DCO_PLLConfig_24
//   96 	UCS->DCORSEL = 1;
??CLOCK_DCO_PLLConfig_23:
        CALLA   #?Subroutine12
??CrossCallReturnLabel_31:
        BIS.B   #0x10, R14
        JMP     ??CLOCK_DCO_PLLConfig_9
//   97   else if (DCO_FLL_Fre < 2.5MHz)     // 1.25MHz < fsystem <  2.5MHz
??CLOCK_DCO_PLLConfig_24:
        CMP.W   #0x26, R11
        JNC     ??CLOCK_DCO_PLLConfig_25
        JNE     ??CLOCK_DCO_PLLConfig_26
        CMP.W   #0x25a0, R10
        JC      ??CLOCK_DCO_PLLConfig_26
//   98 	UCS->DCORSEL = 2;
??CLOCK_DCO_PLLConfig_25:
        CALLA   #?Subroutine12
??CrossCallReturnLabel_32:
        BIS.B   #0x20, R14
        JMP     ??CLOCK_DCO_PLLConfig_9
//   99   else if (DCO_FLL_Fre <   5MHz)     // 2.5MHz  < fsystem <    5MHz
??CLOCK_DCO_PLLConfig_26:
        CMP.W   #0x4c, R11
        JNC     ??CLOCK_DCO_PLLConfig_27
        JNE     ??CLOCK_DCO_PLLConfig_28
        CMP.W   #0x4b40, R10
        JC      ??CLOCK_DCO_PLLConfig_28
//  100 	UCS->DCORSEL = 3;
??CLOCK_DCO_PLLConfig_27:
        CALLA   #?Subroutine12
??CrossCallReturnLabel_33:
        BIS.B   #0x30, R14
        JMP     ??CLOCK_DCO_PLLConfig_9
//  101   else if (DCO_FLL_Fre <  10MHz)     // 5MHz    < fsystem <   10MHz
??CLOCK_DCO_PLLConfig_28:
        CMP.W   #0x98, R11
        JNC     ??CLOCK_DCO_PLLConfig_29
        JNE     ??CLOCK_DCO_PLLConfig_30
        CMP.W   #0x9680, R10
        JC      ??CLOCK_DCO_PLLConfig_30
//  102 	UCS->DCORSEL = 4;
??CLOCK_DCO_PLLConfig_29:
        CALLA   #?Subroutine12
??CrossCallReturnLabel_34:
        BIS.B   #0x40, R14
        JMP     ??CLOCK_DCO_PLLConfig_9
//  103   else if (DCO_FLL_Fre <  20MHz)     // 10MHz   < fsystem <   20MHz
??CLOCK_DCO_PLLConfig_30:
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #?Subroutine9
??CrossCallReturnLabel_24:
        JNC     ??CLOCK_DCO_PLLConfig_31
//  104 	UCS->DCORSEL = 5;
        CALLA   #?Subroutine12
??CrossCallReturnLabel_35:
        BIS.B   #0x50, R14
        JMP     ??CLOCK_DCO_PLLConfig_9
//  105   else if (DCO_FLL_Fre <  40MHz)     // 20MHz   < fsystem <   40MHz
??CLOCK_DCO_PLLConfig_31:
        MOV.W   #0x4c18, R15
          CFI FunCall ?FLT_LT
        CALLA   #?FLT_LT
        JNC     ??CLOCK_DCO_PLLConfig_32
//  106 	UCS->DCORSEL = 6;
        CALLA   #?Subroutine12
??CrossCallReturnLabel_36:
        BIS.B   #0x60, R14
??CLOCK_DCO_PLLConfig_9:
        MOV.B   R14, &0x162
        JMP     ??CLOCK_DCO_PLLConfig_13
//  107   else
//  108 	UCS->DCORSEL = 7;
??CLOCK_DCO_PLLConfig_32:
        BIS.B   #0x70, &0x162
//  109   
//  110   UCS->FLLREFDIV = refdiv;
??CLOCK_DCO_PLLConfig_13:
        MOV.B   #0x7, R8
        MOV.B   R9, R14
        AND.B   R8, R14
        MOV.B   &0x166, R15
        CALLA   #?Subroutine5
??CrossCallReturnLabel_13:
        MOV.B   R15, &0x166
//  111   UCS->SELREF = refsource;
        MOV.B   R6, R14
        RLAM.W  #0x4, R14
        AND.B   #0x70, R14
        MOV.B   &0x166, R15
        AND.B   #0x8f, R15
        BIS.B   R14, R15
        MOV.B   R15, &0x166
//  112   
//  113   float Fref_value;
//  114   if(refsource == FLLREF_XT2)
        CMP.B   #0x5, R6
        JNE     ??CLOCK_DCO_PLLConfig_33
//  115   {
//  116     XT2_Config(TRUE);
        MOV.B   #0x1, R12
          CFI FunCall XT2_Config
        CALLA   #XT2_Config
//  117     Fref_value = (float)((uint32_t)EXTAL_IN_XT2_HZ/ref_div_value[refdiv]);  
        CALLA   #?Subroutine11
//  118   }
??CrossCallReturnLabel_30:
        ADDA    R9, R9
        MOVX.W  ??ref_div_value(R9), R14
        MOV.W   #0x0, R15
          CFI FunCall ?DivMod32u
        CALLA   #?DivMod32u
        JMP     ??CLOCK_DCO_PLLConfig_14
//  119   else if(refsource == FLLREF_XT1)
??CLOCK_DCO_PLLConfig_33:
        CMP.B   #0x0, R6
        JNE     ??CLOCK_DCO_PLLConfig_34
//  120   {
//  121     XT1_Config(TRUE);
        MOV.B   #0x1, R12
          CFI FunCall XT1_Config
        CALLA   #XT1_Config
//  122     Fref_value = (float)(EXTAL_IN_XT1_HZ/ref_div_value[refdiv]);
        JMP     ??CLOCK_DCO_PLLConfig_15
//  123   }
//  124   else if(refsource == FLLREF_REFO)
??CLOCK_DCO_PLLConfig_34:
        CMP.B   #0x2, R6
        JNE     ??CLOCK_DCO_PLLConfig_35
//  125   {
//  126     Fref_value = (float)(REFOCLK_FREQUENCY/ref_div_value[refdiv]);
??CLOCK_DCO_PLLConfig_15:
        MOV.W   #0x8000, R12
        ADDA    R9, R9
        MOVX.W  ??ref_div_value(R9), R14
          CFI FunCall ?DivMod16u
        CALLA   #?DivMod16u
        MOV.W   #0x0, R13
??CLOCK_DCO_PLLConfig_14:
          CFI FunCall _Cast32uto32f
        CALLA   #_Cast32uto32f
        MOV.W   R12, R14
        MOV.W   R13, R15
//  127   }
//  128   uint16_t FLLN_VALUE = (uint16_t)((DCO_FLL_Fre/Fref_value+0.5f)-1u);
//  129   ASSERT(FLLN_VALUE < 1024,"CLOCK_DCO_PLLConfig","FLLN_VALUE不允许超过1023，请将DCO频率设低或者更换为更高频率的参考时钟源！");         //不允许超过1023，请将DCO频率设低或者更换为更高频率的参考时钟源
//  130   
//  131   g_sClock.DCO_FLL_Frequency = DCO_FLL_Fre;
??CLOCK_DCO_PLLConfig_35:
        MOVX.W  R10, &g_sClock + 36
        MOVX.W  R11, &g_sClock + 38
//  132   
//  133   UCS->FLLN = FLLN_VALUE;        //
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Cast32uto32f
        CALLA   #_Cast32uto32f
          CFI FunCall _Div32f
        CALLA   #_Div32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   #0x0, R12
        MOV.W   #0x3f00, R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   #0x0, R12
        MOV.W   #0xbf80, R13
          CFI FunCall _Add32f
        CALLA   #_Add32f
          CFI FunCall _Cast32fto32s
        CALLA   #_Cast32fto32s
        AND.W   #0x3ff, R12
        MOV.W   &0x164, R15
        AND.W   #0xfc00, R15
        BIS.W   R12, R15
        MOV.W   R15, &0x164
//  134   UCS->FLLD = 0;     //设置DCO分频  
        AND.W   #0x8fff, &0x164
//  135   
//  136   __bic_SR_register(SCG0);                  // 使能FLL
        BIC.W   #0x40, SR
        NOP
//  137   do
//  138   {
//  139     UCS->DCO_FFG = RESET; // 清除,CLOCK_DCO 失效标志                                        
??CLOCK_DCO_PLLConfig_4:
        BIC.B   #0x1, &0x16e
//  140     SFRIFG1 &= ~OFIFG;                                             // 清除时钟失效标志
        BIC.W   #0x2, &0x102
//  141   }while (UCS->DCO_FFG == BIT_SET);                                           // 检查DCO失效标志
        BIT.B   #0x1, &0x16e
        JNE     ??CLOCK_DCO_PLLConfig_4
//  142  
//  143   //将使用DCO作为时钟源的时钟频率值修改
//  144   if(UCS->SELM == CLOCK_DCO || UCS->SELM == CLOCK_DCO_DIV) 
        MOVA    #0x168, R11
        MOV.B   R8, R14
        AND.B   @R11, R14
        CMP.B   #0x3, R14
        JEQ     ??CLOCK_DCO_PLLConfig_36
        MOV.B   R8, R14
        AND.B   @R11, R14
        CMP.B   #0x4, R14
        JNE     ??CLOCK_DCO_PLLConfig_37
//  145   {
//  146     CLOCK_DIVx div = (CLOCK_DIVx)UCS->DIVM;
??CLOCK_DCO_PLLConfig_36:
        MOV.B   &0x16a, R13
//  147     CLOCK_MCLK_Config ((CLOCK_Source)UCS->SELM, div);
        AND.B   R8, R13
        MOV.B   R8, R12
        AND.B   @R11, R12
          CFI FunCall CLOCK_MCLK_Config
        CALLA   #CLOCK_MCLK_Config
//  148   }
//  149   
//  150   if(UCS->SELS == CLOCK_DCO || UCS->SELS == CLOCK_DCO_DIV)
??CLOCK_DCO_PLLConfig_37:
        MOV.B   @R11, R14
        RRUM.W  #0x4, R14
        AND.B   R8, R14
        CMP.B   #0x3, R14
        JEQ     ??CLOCK_DCO_PLLConfig_38
        MOV.B   @R11, R14
        RRUM.W  #0x4, R14
        AND.B   R8, R14
        CMP.B   #0x4, R14
        JNE     ??CLOCK_DCO_PLLConfig_39
//  151   {
//  152     CLOCK_DIVx div = (CLOCK_DIVx)UCS->DIVS;
??CLOCK_DCO_PLLConfig_38:
        MOV.B   &0x16a, R13
//  153     CLOCK_SMCLK_Config((CLOCK_Source)UCS->SELS, div);
        RRUM.W  #0x4, R13
        AND.B   R8, R13
        MOV.B   @R11, R12
        RRUM.W  #0x4, R12
        AND.B   R8, R12
          CFI FunCall CLOCK_SMCLK_Config
        CALLA   #CLOCK_SMCLK_Config
//  154   }
//  155   
//  156   if(UCS->SELA == CLOCK_DCO || UCS->SELA == CLOCK_DCO_DIV)
??CLOCK_DCO_PLLConfig_39:
        MOV.B   R8, R14
        AND.B   &0x169, R14
        CMP.B   #0x3, R14
        JEQ     ??CLOCK_DCO_PLLConfig_40
        MOV.B   R8, R14
        AND.B   &0x169, R14
        CMP.B   #0x4, R14
        JNE     ??CLOCK_DCO_PLLConfig_41
//  157   {
//  158     CLOCK_DIVx div = (CLOCK_DIVx)UCS->DIVA;
??CLOCK_DCO_PLLConfig_40:
        MOV.B   &0x16b, R13
//  159     CLOCK_ACLK_Config ((CLOCK_Source)UCS->SELS, div);
        AND.B   R8, R13
        MOV.B   @R11, R12
        RRUM.W  #0x4, R12
        AND.B   R8, R12
          CFI FunCall CLOCK_ACLK_Config
        CALLA   #CLOCK_ACLK_Config
//  160   }
//  161 }
??CLOCK_DCO_PLLConfig_41:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock19
        REQUIRE _A_SFRIFG1_L
        REQUIRE _A_PMMCTL0_L
        REQUIRE _A_SVSMHCTL_L
        REQUIRE _A_SVSMLCTL_L
        REQUIRE _A_PMMIFG_L

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine12:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function CLOCK_DCO_PLLConfig
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+32
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function CLOCK_DCO_PLLConfig
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond21) R6L Frame(CFA, -28)
          CFI (cfiCond21) R6H Frame(CFA, -26)
          CFI (cfiCond21) R7L Frame(CFA, -24)
          CFI (cfiCond21) R7H Frame(CFA, -22)
          CFI (cfiCond21) R8L Frame(CFA, -20)
          CFI (cfiCond21) R8H Frame(CFA, -18)
          CFI (cfiCond21) R9L Frame(CFA, -16)
          CFI (cfiCond21) R9H Frame(CFA, -14)
          CFI (cfiCond21) R10L Frame(CFA, -12)
          CFI (cfiCond21) R10H Frame(CFA, -10)
          CFI (cfiCond21) R11L Frame(CFA, -8)
          CFI (cfiCond21) R11H Frame(CFA, -6)
          CFI (cfiCond21) CFA SP+32
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function CLOCK_DCO_PLLConfig
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond22) R6L Frame(CFA, -28)
          CFI (cfiCond22) R6H Frame(CFA, -26)
          CFI (cfiCond22) R7L Frame(CFA, -24)
          CFI (cfiCond22) R7H Frame(CFA, -22)
          CFI (cfiCond22) R8L Frame(CFA, -20)
          CFI (cfiCond22) R8H Frame(CFA, -18)
          CFI (cfiCond22) R9L Frame(CFA, -16)
          CFI (cfiCond22) R9H Frame(CFA, -14)
          CFI (cfiCond22) R10L Frame(CFA, -12)
          CFI (cfiCond22) R10H Frame(CFA, -10)
          CFI (cfiCond22) R11L Frame(CFA, -8)
          CFI (cfiCond22) R11H Frame(CFA, -6)
          CFI (cfiCond22) CFA SP+32
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function CLOCK_DCO_PLLConfig
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond23) R6L Frame(CFA, -28)
          CFI (cfiCond23) R6H Frame(CFA, -26)
          CFI (cfiCond23) R7L Frame(CFA, -24)
          CFI (cfiCond23) R7H Frame(CFA, -22)
          CFI (cfiCond23) R8L Frame(CFA, -20)
          CFI (cfiCond23) R8H Frame(CFA, -18)
          CFI (cfiCond23) R9L Frame(CFA, -16)
          CFI (cfiCond23) R9H Frame(CFA, -14)
          CFI (cfiCond23) R10L Frame(CFA, -12)
          CFI (cfiCond23) R10H Frame(CFA, -10)
          CFI (cfiCond23) R11L Frame(CFA, -8)
          CFI (cfiCond23) R11H Frame(CFA, -6)
          CFI (cfiCond23) CFA SP+32
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function CLOCK_DCO_PLLConfig
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond24) R6L Frame(CFA, -28)
          CFI (cfiCond24) R6H Frame(CFA, -26)
          CFI (cfiCond24) R7L Frame(CFA, -24)
          CFI (cfiCond24) R7H Frame(CFA, -22)
          CFI (cfiCond24) R8L Frame(CFA, -20)
          CFI (cfiCond24) R8H Frame(CFA, -18)
          CFI (cfiCond24) R9L Frame(CFA, -16)
          CFI (cfiCond24) R9H Frame(CFA, -14)
          CFI (cfiCond24) R10L Frame(CFA, -12)
          CFI (cfiCond24) R10H Frame(CFA, -10)
          CFI (cfiCond24) R11L Frame(CFA, -8)
          CFI (cfiCond24) R11H Frame(CFA, -6)
          CFI (cfiCond24) CFA SP+32
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function CLOCK_DCO_PLLConfig
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond25) R6L Frame(CFA, -28)
          CFI (cfiCond25) R6H Frame(CFA, -26)
          CFI (cfiCond25) R7L Frame(CFA, -24)
          CFI (cfiCond25) R7H Frame(CFA, -22)
          CFI (cfiCond25) R8L Frame(CFA, -20)
          CFI (cfiCond25) R8H Frame(CFA, -18)
          CFI (cfiCond25) R9L Frame(CFA, -16)
          CFI (cfiCond25) R9H Frame(CFA, -14)
          CFI (cfiCond25) R10L Frame(CFA, -12)
          CFI (cfiCond25) R10H Frame(CFA, -10)
          CFI (cfiCond25) R11L Frame(CFA, -8)
          CFI (cfiCond25) R11H Frame(CFA, -6)
          CFI (cfiCond25) CFA SP+32
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        MOV.B   &0x162, R14
        AND.B   #0x8f, R14
        RETA
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine9:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function CLOCK_DCO_PLLConfig
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+32
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function CLOCK_DCO_PLLConfig
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond28) R6L Frame(CFA, -28)
          CFI (cfiCond28) R6H Frame(CFA, -26)
          CFI (cfiCond28) R7L Frame(CFA, -24)
          CFI (cfiCond28) R7H Frame(CFA, -22)
          CFI (cfiCond28) R8L Frame(CFA, -20)
          CFI (cfiCond28) R8H Frame(CFA, -18)
          CFI (cfiCond28) R9L Frame(CFA, -16)
          CFI (cfiCond28) R9H Frame(CFA, -14)
          CFI (cfiCond28) R10L Frame(CFA, -12)
          CFI (cfiCond28) R10H Frame(CFA, -10)
          CFI (cfiCond28) R11L Frame(CFA, -8)
          CFI (cfiCond28) R11H Frame(CFA, -6)
          CFI (cfiCond28) CFA SP+32
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
          CFI (cfiCond27) FunCall CLOCK_DCO_PLLConfig _Cast32uto32f
          CFI (cfiCond27) FunCall CLOCK_DCO_PLLConfig _Cast32uto32f
        CALLA   #_Cast32uto32f
        MOV.W   #0x9680, R14
        MOV.W   #0x4b98, R15
          CFI (cfiCond27) TailCall CLOCK_DCO_PLLConfig ?FLT_LT
          CFI (cfiCond27) TailCall CLOCK_DCO_PLLConfig ?FLT_LT
        BRA     #?FLT_LT
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
??ref_div_value:
        DATA16
        DC16 1, 2, 4, 8, 12, 16
//  162 /*************************************************************************
//  163 *  函数名称：CLOCK_MCLK_Config  (CLOCK_Source mclk , CLOCK_DIVx mclk_div)
//  164 *  功能说明：设置主时钟源及分频
//  165 *  参数说明：CLOCK_Source mclk   :主时钟时钟源
//  166              CLOCK_DIVx mclk_div :主时钟分频系数
//  167 *  函数返回：无
//  168 *  使用示例：CLOCK_MCLK_Config  (CLOCK_DCO , DIV_1);   //主时钟使用DCO作为时钟源，分频系数为1（不分频）
//  169 *************************************************************************/  

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine8:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function CLOCK_ACLK_Config
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+16
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function CLOCK_SMCLK_Config
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond31) R10L Frame(CFA, -12)
          CFI (cfiCond31) R10H Frame(CFA, -10)
          CFI (cfiCond31) R11L Frame(CFA, -8)
          CFI (cfiCond31) R11H Frame(CFA, -6)
          CFI (cfiCond31) CFA SP+16
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function CLOCK_MCLK_Config
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond32) R10L Frame(CFA, -12)
          CFI (cfiCond32) R10H Frame(CFA, -10)
          CFI (cfiCond32) R11L Frame(CFA, -8)
          CFI (cfiCond32) R11H Frame(CFA, -6)
          CFI (cfiCond32) CFA SP+16
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        MOVX.W  &g_sClock + 36, R12
        MOVX.W  &g_sClock + 38, R13
        RETA
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine7:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function CLOCK_ACLK_Config
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+16
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function CLOCK_SMCLK_Config
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond35) R10L Frame(CFA, -12)
          CFI (cfiCond35) R10H Frame(CFA, -10)
          CFI (cfiCond35) R11L Frame(CFA, -8)
          CFI (cfiCond35) R11H Frame(CFA, -6)
          CFI (cfiCond35) CFA SP+16
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function CLOCK_MCLK_Config
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond36) R10L Frame(CFA, -12)
          CFI (cfiCond36) R10H Frame(CFA, -10)
          CFI (cfiCond36) R11L Frame(CFA, -8)
          CFI (cfiCond36) R11H Frame(CFA, -6)
          CFI (cfiCond36) CFA SP+16
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
          CFI (cfiCond34) FunCall CLOCK_ACLK_Config _Cast32uto32f
          CFI (cfiCond35) FunCall CLOCK_SMCLK_Config _Cast32uto32f
          CFI (cfiCond36) FunCall CLOCK_MCLK_Config _Cast32uto32f
        CALLA   #_Cast32uto32f
        MOV.W   #0x2400, R14
        MOV.W   #0x4974, R15
          CFI (cfiCond34) TailCall CLOCK_ACLK_Config _Div32f
          CFI (cfiCond35) TailCall CLOCK_SMCLK_Config _Div32f
          CFI (cfiCond36) TailCall CLOCK_MCLK_Config _Div32f
        BRA     #_Div32f
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine6:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function CLOCK_ACLK_Config
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+16
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function CLOCK_SMCLK_Config
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond39) R10L Frame(CFA, -12)
          CFI (cfiCond39) R10H Frame(CFA, -10)
          CFI (cfiCond39) R11L Frame(CFA, -8)
          CFI (cfiCond39) R11H Frame(CFA, -6)
          CFI (cfiCond39) CFA SP+16
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function CLOCK_MCLK_Config
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond40) R10L Frame(CFA, -12)
          CFI (cfiCond40) R10H Frame(CFA, -10)
          CFI (cfiCond40) R11L Frame(CFA, -8)
          CFI (cfiCond40) R11H Frame(CFA, -6)
          CFI (cfiCond40) CFA SP+16
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        PUSH.W  SR
          CFI (cfiCond38) CFA SP+18
          CFI (cfiCond39) CFA SP+18
          CFI (cfiCond40) CFA SP+18
          CFI (cfiPicker41) CFA SP+6
        DINT
        NOP
        MOV.W   R12, &__iar_HWMUL + 16         // MPY32L
        MOV.W   R13, &__iar_HWMUL + 18         // MPY32H
        MOV.W   #0x6e98, &__iar_HWMUL + 32     // OP2L
        MOV.W   #0x8312, &__iar_HWMUL + 34     // OP2H
        MOV.W   &__iar_HWMUL + 36, R12         // RES0
        MOV.W   &__iar_HWMUL + 38, R13         // RES1
        MOV.W   &__iar_HWMUL + 40, R12         // RES2
        MOV.W   &__iar_HWMUL + 42, R15         // RES3
        NOP
        POP.W   SR
          CFI (cfiCond38) CFA SP+16
          CFI (cfiCond39) CFA SP+16
          CFI (cfiCond40) CFA SP+16
          CFI (cfiPicker41) CFA SP+4
        SWPB    R15
        SWPB    R12
        XOR.B   R15, R12
        XOR.W   R15, R12
        MOV.B   R15, R13
        RRUM.W  #0x1, R13
        RRC.W   R12
        RETA
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine4:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function CLOCK_ACLK_Config
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+16
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function CLOCK_SMCLK_Config
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond43) R10L Frame(CFA, -12)
          CFI (cfiCond43) R10H Frame(CFA, -10)
          CFI (cfiCond43) R11L Frame(CFA, -8)
          CFI (cfiCond43) R11H Frame(CFA, -6)
          CFI (cfiCond43) CFA SP+16
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function CLOCK_MCLK_Config
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond44) R10L Frame(CFA, -12)
          CFI (cfiCond44) R10H Frame(CFA, -10)
          CFI (cfiCond44) R11L Frame(CFA, -8)
          CFI (cfiCond44) R11H Frame(CFA, -6)
          CFI (cfiCond44) CFA SP+16
          CFI Block cfiPicker45 Using cfiCommon1
          CFI (cfiPicker45) NoFunction
          CFI (cfiPicker45) Picker
        MOV.B   R10, R14
          CFI (cfiCond42) FunCall CLOCK_ACLK_Config ?ShiftRight32u
          CFI (cfiCond43) FunCall CLOCK_SMCLK_Config ?ShiftRight32u
          CFI (cfiCond44) FunCall CLOCK_MCLK_Config ?ShiftRight32u
        CALLA   #?ShiftRight32u
        MOVA    #g_sClock, R10
        RETA
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiPicker45

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  170 void CLOCK_MCLK_Config  (CLOCK_Source mclk , CLOCK_DIVx mclk_div)
CLOCK_MCLK_Config:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function CLOCK_MCLK_Config
          CFI NoCalls
//  171 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        CALLA   #?Subroutine0
//  172   if(mclk == CLOCK_XT2)
//  173   {
//  174     XT2_Config(TRUE);
//  175   }
//  176   else if(mclk == CLOCK_XT1)
//  177   {
//  178     XT1_Config(TRUE);
//  179   }
//  180   
//  181   UCS->SELM = mclk;                         //选择DCO作为时钟源
??CrossCallReturnLabel_1:
        AND.B   #0x7, R14
        MOV.B   &0x168, R15
        CALLA   #?Subroutine5
??CrossCallReturnLabel_11:
        MOV.B   R15, &0x168
//  182   UCS->DIVM = mclk_div;
        MOV.B   R10, R14
        AND.B   #0x7, R14
        MOV.B   &0x16a, R15
        CALLA   #?Subroutine5
??CrossCallReturnLabel_12:
        MOV.B   R15, &0x16a
//  183   
//  184   switch(mclk)
        SUB.B   #0x0, R11
        JEQ     ??CLOCK_MCLK_Config_6
        SUB.B   #0x1, R11
        JEQ     ??CLOCK_MCLK_Config_7
        SUB.B   #0x1, R11
        JEQ     ??CLOCK_MCLK_Config_6
        SUB.B   #0x1, R11
        JEQ     ??CLOCK_MCLK_Config_8
        SUB.B   #0x1, R11
        JEQ     ??CLOCK_MCLK_Config_8
        SUB.B   #0x1, R11
        JEQ     ??CLOCK_MCLK_Config_9
        JMP     ??CLOCK_MCLK_Config_1
//  185   {
//  186   case CLOCK_XT1    :g_sClock.MCLK.nHZ = EXTAL_IN_XT1_HZ;break;
//  187   case CLOCK_VLO    :g_sClock.MCLK.nHZ = VLOCLK_FREQUENCY;break;
??CLOCK_MCLK_Config_7:
        MOV.W   #0x2710, R12
??CLOCK_MCLK_Config_5:
        MOV.W   #0x0, R13
//  188   case CLOCK_REFO   :g_sClock.MCLK.nHZ = REFOCLK_FREQUENCY;break;       
//  189   case CLOCK_DCO    :g_sClock.MCLK.nHZ = g_sClock.DCO_FLL_Frequency;break;    
//  190   case CLOCK_DCO_DIV:g_sClock.MCLK.nHZ = g_sClock.DCO_FLL_Frequency;break;
//  191   case CLOCK_XT2    :g_sClock.MCLK.nHZ = EXTAL_IN_XT2_HZ;break;
//  192   default :return;
//  193   }
//  194   g_sClock.MCLK.nHZ  >>= mclk_div;
??CLOCK_MCLK_Config_0:
        CALLA   #?Subroutine4
??CrossCallReturnLabel_8:
        MOV.W   R12, 0(R10)
        MOV.W   R13, 0x2(R10)
//  195   g_sClock.MCLK.nKHZ = g_sClock.MCLK.nHZ/1000u;
        CALLA   #?Subroutine6
??CrossCallReturnLabel_16:
        MOV.W   R12, 0x4(R10)
        MOV.W   R13, 0x6(R10)
//  196   g_sClock.MCLK.fMHZ = g_sClock.MCLK.nHZ/1000000.0;
        MOV.W   @R10, R12
        MOV.W   0x2(R10), R13
        CALLA   #?Subroutine7
??CrossCallReturnLabel_19:
        MOV.W   R12, 0x8(R10)
        MOV.W   R13, 0xa(R10)
//  197 }
??CLOCK_MCLK_Config_1:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
??CLOCK_MCLK_Config_6:
        MOV.W   #0x8000, R12
        JMP     ??CLOCK_MCLK_Config_5
??CLOCK_MCLK_Config_8:
        CALLA   #?Subroutine8
??CrossCallReturnLabel_22:
        JMP     ??CLOCK_MCLK_Config_0
??CLOCK_MCLK_Config_9:
        CALLA   #?Subroutine11
??CrossCallReturnLabel_29:
        JMP     ??CLOCK_MCLK_Config_0
        NOP
          CFI EndBlock cfiBlock46

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine0:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function CLOCK_SMCLK_Config
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+16
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function CLOCK_MCLK_Config
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond48) R10L Frame(CFA, -12)
          CFI (cfiCond48) R10H Frame(CFA, -10)
          CFI (cfiCond48) R11L Frame(CFA, -8)
          CFI (cfiCond48) R11H Frame(CFA, -6)
          CFI (cfiCond48) CFA SP+16
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOV.B   R12, R11
        MOV.B   R13, R10
        CMP.B   #0x5, R12
        JNE     ??CLOCK_SMCLK_Config_3
        MOV.B   #0x1, R12
          CFI (cfiCond47) FunCall CLOCK_SMCLK_Config XT2_Config
          CFI (cfiCond48) FunCall CLOCK_MCLK_Config XT2_Config
        CALLA   #XT2_Config
        JMP     ??CLOCK_SMCLK_Config_4
??CLOCK_SMCLK_Config_3:
        CMP.B   #0x0, R12
        JNE     ??CLOCK_SMCLK_Config_4
        MOV.B   #0x1, R12
          CFI (cfiCond47) FunCall CLOCK_SMCLK_Config XT1_Config
          CFI (cfiCond48) FunCall CLOCK_MCLK_Config XT1_Config
        CALLA   #XT1_Config
??CLOCK_SMCLK_Config_4:
        MOV.B   R11, R14
        RETA
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49
//  198 /*************************************************************************
//  199 *  函数名称：CLOCK_SMCLK_Config (CLOCK_Source smclk, CLOCK_DIVx smclk_div)
//  200 *  功能说明：设置系统时钟源及分频
//  201 *  参数说明：CLOCK_Source smclk   :系统时钟时钟源
//  202              CLOCK_DIVx smclk_div :系统时钟分频系数
//  203 *  函数返回：无
//  204 *  使用示例：CLOCK_SMCLK_Config  (CLOCK_DCO , DIV_2);   //系统时钟使用DCO作为时钟源，分频系数为2（二分频）
//  205 *************************************************************************/  

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  206 void CLOCK_SMCLK_Config (CLOCK_Source smclk, CLOCK_DIVx smclk_div)
CLOCK_SMCLK_Config:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function CLOCK_SMCLK_Config
          CFI NoCalls
//  207 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        CALLA   #?Subroutine0
//  208   if(smclk == CLOCK_XT2)
//  209   {
//  210     XT2_Config(TRUE);
//  211   }
//  212   else if(smclk == CLOCK_XT1)
//  213   {
//  214     XT1_Config(TRUE);
//  215   }
//  216   
//  217   UCS->SELS = smclk;//选择smclk时钟源
??CrossCallReturnLabel_0:
        RLAM.W  #0x4, R14
        AND.B   #0x70, R14
        MOV.B   &0x168, R15
        AND.B   #0x8f, R15
        BIS.B   R14, R15
        MOV.B   R15, &0x168
//  218   UCS->DIVS = smclk_div;
        MOV.B   R10, R14
        RLAM.W  #0x4, R14
        AND.B   #0x70, R14
        MOV.B   &0x16a, R15
        AND.B   #0x8f, R15
        BIS.B   R14, R15
        MOV.B   R15, &0x16a
//  219   
//  220   switch(smclk)
        SUB.B   #0x0, R11
        JEQ     ??CLOCK_SMCLK_Config_6
        SUB.B   #0x1, R11
        JEQ     ??CLOCK_SMCLK_Config_7
        SUB.B   #0x1, R11
        JEQ     ??CLOCK_SMCLK_Config_6
        SUB.B   #0x1, R11
        JEQ     ??CLOCK_SMCLK_Config_8
        SUB.B   #0x1, R11
        JEQ     ??CLOCK_SMCLK_Config_8
        SUB.B   #0x1, R11
        JEQ     ??CLOCK_SMCLK_Config_9
        JMP     ??CLOCK_SMCLK_Config_1
//  221   {
//  222   case CLOCK_XT1    :g_sClock.SMCLK.nHZ = EXTAL_IN_XT1_HZ;break;
//  223   case CLOCK_VLO    :g_sClock.SMCLK.nHZ = VLOCLK_FREQUENCY;break;
??CLOCK_SMCLK_Config_7:
        MOV.W   #0x2710, R12
??CLOCK_SMCLK_Config_5:
        MOV.W   #0x0, R13
//  224   case CLOCK_REFO   :g_sClock.SMCLK.nHZ = REFOCLK_FREQUENCY;break;       
//  225   case CLOCK_DCO    :g_sClock.SMCLK.nHZ = g_sClock.DCO_FLL_Frequency;break; 
//  226   case CLOCK_DCO_DIV:g_sClock.SMCLK.nHZ = g_sClock.DCO_FLL_Frequency;break;
//  227   case CLOCK_XT2    :g_sClock.SMCLK.nHZ = EXTAL_IN_XT2_HZ;break;
//  228   default :return;
//  229   }
//  230   g_sClock.SMCLK.nHZ >>= smclk_div;
??CLOCK_SMCLK_Config_0:
        CALLA   #?Subroutine4
??CrossCallReturnLabel_7:
        MOV.W   R12, 0xc(R10)
        MOV.W   R13, 0xe(R10)
//  231   g_sClock.SMCLK.nKHZ = g_sClock.SMCLK.nHZ/1000u;;
        CALLA   #?Subroutine6
??CrossCallReturnLabel_15:
        MOV.W   R12, 0x10(R10)
        MOV.W   R13, 0x12(R10)
//  232   g_sClock.SMCLK.fMHZ = g_sClock.SMCLK.nHZ/1000000.0;
        MOV.W   0xc(R10), R12
        MOV.W   0xe(R10), R13
        CALLA   #?Subroutine7
??CrossCallReturnLabel_18:
        MOV.W   R12, 0x14(R10)
        MOV.W   R13, 0x16(R10)
//  233 }
??CLOCK_SMCLK_Config_1:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
??CLOCK_SMCLK_Config_6:
        MOV.W   #0x8000, R12
        JMP     ??CLOCK_SMCLK_Config_5
??CLOCK_SMCLK_Config_8:
        CALLA   #?Subroutine8
??CrossCallReturnLabel_21:
        JMP     ??CLOCK_SMCLK_Config_0
??CLOCK_SMCLK_Config_9:
        CALLA   #?Subroutine11
??CrossCallReturnLabel_28:
        JMP     ??CLOCK_SMCLK_Config_0
        NOP
          CFI EndBlock cfiBlock50
//  234 /*************************************************************************
//  235 *  函数名称：CLOCK_ACLK_Config  (CLOCK_Source aclk , CLOCK_DIVx aclk_div)
//  236 *  功能说明：设置辅助时钟源及分频
//  237 *  参数说明：CLOCK_Source aclk   :辅助时钟时钟源
//  238              CLOCK_DIVx aclk_div :辅助时钟分频系数
//  239 *  函数返回：无
//  240 *  使用示例：CLOCK_ACLK_Config  (XT! , DIV_4);   //辅助时钟使用XT1作为时钟源，分频系数为4（四分频）
//  241 *************************************************************************/  

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  242 void CLOCK_ACLK_Config  (CLOCK_Source aclk , CLOCK_DIVx aclk_div)
CLOCK_ACLK_Config:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function CLOCK_ACLK_Config
//  243 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.B   R12, R11
        MOV.B   R13, R10
//  244    if(aclk == CLOCK_XT2)
        CMP.B   #0x5, R12
        JNE     ??CLOCK_ACLK_Config_6
//  245   {
//  246     XT2_Config(TRUE);
        MOV.B   #0x1, R12
          CFI FunCall XT2_Config
        CALLA   #XT2_Config
        JMP     ??CLOCK_ACLK_Config_4
//  247   }
//  248   else if(aclk == CLOCK_XT1)
??CLOCK_ACLK_Config_6:
        CMP.B   #0x0, R12
        JNE     ??CLOCK_ACLK_Config_4
//  249   {
//  250     XT1_Config(TRUE);
        BIT.B   #0x1, &0x16c
        JEQ     ??CLOCK_ACLK_Config_4
        CALLA   #?Subroutine1
//  251   }
??CLOCK_ACLK_Config_0:
        CALLA   #?Subroutine3
??CrossCallReturnLabel_5:
        JNE     ??CLOCK_ACLK_Config_0
//  252   
//  253   UCS->SELA = aclk;//选择时钟源                   
??CLOCK_ACLK_Config_4:
        MOV.B   R11, R14
        AND.B   #0x7, R14
        MOV.B   &0x169, R15
        CALLA   #?Subroutine5
??CrossCallReturnLabel_9:
        MOV.B   R15, &0x169
//  254   UCS->DIVA = aclk_div; //设置分频系数为0
        MOV.B   R10, R14
        AND.B   #0x7, R14
        MOV.B   &0x16b, R15
        CALLA   #?Subroutine5
??CrossCallReturnLabel_10:
        MOV.B   R15, &0x16b
//  255   
//  256   switch(aclk)
        SUB.B   #0x0, R11
        JEQ     ??CLOCK_ACLK_Config_7
        SUB.B   #0x1, R11
        JEQ     ??CLOCK_ACLK_Config_8
        SUB.B   #0x1, R11
        JEQ     ??CLOCK_ACLK_Config_7
        SUB.B   #0x1, R11
        JEQ     ??CLOCK_ACLK_Config_9
        SUB.B   #0x1, R11
        JEQ     ??CLOCK_ACLK_Config_9
        SUB.B   #0x1, R11
        JEQ     ??CLOCK_ACLK_Config_10
        JMP     ??CLOCK_ACLK_Config_2
//  257   {
//  258   case CLOCK_XT1    :g_sClock.ACLK.nHZ = EXTAL_IN_XT1_HZ;break;
//  259   case CLOCK_VLO    :g_sClock.ACLK.nHZ = VLOCLK_FREQUENCY;break;
??CLOCK_ACLK_Config_8:
        MOV.W   #0x2710, R12
??CLOCK_ACLK_Config_5:
        MOV.W   #0x0, R13
//  260   case CLOCK_REFO   :g_sClock.ACLK.nHZ = REFOCLK_FREQUENCY;break;       
//  261   case CLOCK_DCO    :g_sClock.ACLK.nHZ = g_sClock.DCO_FLL_Frequency;break;   
//  262   case CLOCK_DCO_DIV:g_sClock.ACLK.nHZ = g_sClock.DCO_FLL_Frequency;break;
//  263   case CLOCK_XT2    :g_sClock.ACLK.nHZ = EXTAL_IN_XT2_HZ;break;
//  264   default :return;
//  265   }
//  266   g_sClock.ACLK.nHZ >>= aclk_div;
??CLOCK_ACLK_Config_1:
        CALLA   #?Subroutine4
??CrossCallReturnLabel_6:
        MOV.W   R12, 0x18(R10)
        MOV.W   R13, 0x1a(R10)
//  267   g_sClock.ACLK.nKHZ = g_sClock.ACLK.nHZ/1000u;;
        CALLA   #?Subroutine6
??CrossCallReturnLabel_14:
        MOV.W   R12, 0x1c(R10)
        MOV.W   R13, 0x1e(R10)
//  268   g_sClock.ACLK.fMHZ = g_sClock.ACLK.nHZ/1000000.0;
        MOV.W   0x18(R10), R12
        MOV.W   0x1a(R10), R13
        CALLA   #?Subroutine7
??CrossCallReturnLabel_17:
        MOV.W   R12, 0x20(R10)
        MOV.W   R13, 0x22(R10)
//  269 }
??CLOCK_ACLK_Config_2:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
??CLOCK_ACLK_Config_7:
        MOV.W   #0x8000, R12
        JMP     ??CLOCK_ACLK_Config_5
??CLOCK_ACLK_Config_9:
        CALLA   #?Subroutine8
??CrossCallReturnLabel_20:
        JMP     ??CLOCK_ACLK_Config_1
??CLOCK_ACLK_Config_10:
        CALLA   #?Subroutine11
??CrossCallReturnLabel_27:
        JMP     ??CLOCK_ACLK_Config_1
        NOP
          CFI EndBlock cfiBlock51
        REQUIRE _A_SFRIFG1_L
//  270 /*******************************************************************************
//  271 函数功能：设置内核电压值（与频率设置有关）
//  272 函数参数：u8 level ：电压阶梯 小于3
//  273 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  274 void SetVcoreUp (uint8_t level)
SetVcoreUp:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function SetVcoreUp
          CFI NoCalls
//  275 {
//  276 #if 1  //仿真时修改为0，否则会卡在死循环里
//  277   // Open PMM registers for write
//  278   PMMCTL0_H = PMMPW_H;              
        MOV.B   #0xa5, &0x121
//  279   // Set SVS/SVM high side new level
//  280   SVSMHCTL = SVSHE + SVSHRVL0 * level + SVMHE + SVSMHRRL0 * level;
        MOV.B   R12, R15
        MOV.W   R15, R14
        SWPB    R14
        ADD.W   R15, R14
        ADD.W   #0x4400, R14
        MOV.W   R14, &0x124
//  281   // Set SVM low side to new level
//  282   SVSMLCTL = SVSLE + SVMLE + SVSMLRRL0 * level;
        ADD.W   #0x4400, R15
        MOV.W   R15, &0x126
//  283   // Wait till SVM is settled
//  284   uint16_t i=50000; 
        MOV.W   #0xc350, R13
//  285   while (((PMMIFG & SVSMLDLYIFG) == 0)&&((i--)>0));
??SetVcoreUp_0:
        BIT.W   #0x1, &0x12c
        JNE     ??SetVcoreUp_3
        MOV.W   R13, R15
        ADD.W   #0xffff, R13
        CMP.W   #0x0, R15
        JNE     ??SetVcoreUp_0
//  286   // Clear already set flags
//  287   PMMIFG &= ~(SVMLVLRIFG + SVMLIFG);
??SetVcoreUp_3:
        AND.W   #0xfff9, &0x12c
//  288   // Set VCore to new level
//  289   PMMCTL0_L = PMMCOREV0 * level;
        MOV.B   R12, &0x120
//  290   // Wait till new level reached
//  291   i =50000;
        MOV.W   #0xc350, R13
//  292   if ((PMMIFG & SVMLIFG))
        BIT.W   #0x2, &0x12c
        JEQ     ??SetVcoreUp_2
//  293     while(((PMMIFG & SVMLVLRIFG) == 0)&&((i--)>0));
??SetVcoreUp_1:
        BIT.W   #0x4, &0x12c
        JNE     ??SetVcoreUp_2
        MOV.W   R13, R15
        ADD.W   #0xffff, R13
        CMP.W   #0x0, R15
        JNE     ??SetVcoreUp_1
//  294   /*
//  295   if ((PMMIFG & SVMLIFG))
//  296     while ((PMMIFG & SVMLVLRIFG) == 0);
//  297   */
//  298   // Set SVS/SVM low side to new level
//  299   SVSMLCTL = SVSLE + SVSLRVL0 * level + SVMLE + SVSMLRRL0 * level;
??SetVcoreUp_2:
        MOV.W   R14, &0x126
//  300   // Lock PMM registers for write access
//  301   PMMCTL0_H = 0x00;
        MOV.B   #0x0, &0x121
//  302 #endif
//  303 }
        RETA
          CFI EndBlock cfiBlock52
        REQUIRE _A_PMMCTL0_L
        REQUIRE _A_SVSMHCTL_L
        REQUIRE _A_SVSMLCTL_L
        REQUIRE _A_PMMIFG_L

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine10:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function CLOCK_DCO_PLLConfig
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+32
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function CLOCK_DCO_PLLConfig
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond54) R6L Frame(CFA, -28)
          CFI (cfiCond54) R6H Frame(CFA, -26)
          CFI (cfiCond54) R7L Frame(CFA, -24)
          CFI (cfiCond54) R7H Frame(CFA, -22)
          CFI (cfiCond54) R8L Frame(CFA, -20)
          CFI (cfiCond54) R8H Frame(CFA, -18)
          CFI (cfiCond54) R9L Frame(CFA, -16)
          CFI (cfiCond54) R9H Frame(CFA, -14)
          CFI (cfiCond54) R10L Frame(CFA, -12)
          CFI (cfiCond54) R10H Frame(CFA, -10)
          CFI (cfiCond54) R11L Frame(CFA, -8)
          CFI (cfiCond54) R11H Frame(CFA, -6)
          CFI (cfiCond54) CFA SP+32
          CFI Block cfiPicker55 Using cfiCommon1
          CFI (cfiPicker55) NoFunction
          CFI (cfiPicker55) Picker
        MOV.W   R8, R14
??CLOCK_DCO_PLLConfig_0:
        BIT.W   #0x1, &0x12c
        JNE     ??CLOCK_DCO_PLLConfig_6
        MOV.W   R14, R15
        ADD.W   #0xffff, R14
        CMP.W   #0x0, R15
        JNE     ??CLOCK_DCO_PLLConfig_0
??CLOCK_DCO_PLLConfig_6:
        AND.W   #0xfff9, &0x12c
        RETA
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiPicker55

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine2:
          CFI Block cfiCond56 Using cfiCommon0
          CFI Function CLOCK_DCO_PLLConfig
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+32
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function CLOCK_DCO_PLLConfig
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond57) R6L Frame(CFA, -28)
          CFI (cfiCond57) R6H Frame(CFA, -26)
          CFI (cfiCond57) R7L Frame(CFA, -24)
          CFI (cfiCond57) R7H Frame(CFA, -22)
          CFI (cfiCond57) R8L Frame(CFA, -20)
          CFI (cfiCond57) R8H Frame(CFA, -18)
          CFI (cfiCond57) R9L Frame(CFA, -16)
          CFI (cfiCond57) R9H Frame(CFA, -14)
          CFI (cfiCond57) R10L Frame(CFA, -12)
          CFI (cfiCond57) R10H Frame(CFA, -10)
          CFI (cfiCond57) R11L Frame(CFA, -8)
          CFI (cfiCond57) R11H Frame(CFA, -6)
          CFI (cfiCond57) CFA SP+32
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        MOV.W   R8, R14
        BIT.W   #0x2, &0x12c
        JEQ     ??CLOCK_DCO_PLLConfig_5
??CLOCK_DCO_PLLConfig_1:
        BIT.W   #0x4, &0x12c
        JNE     ??CLOCK_DCO_PLLConfig_5
        MOV.W   R14, R15
        ADD.W   #0xffff, R14
        CMP.W   #0x0, R15
        JNE     ??CLOCK_DCO_PLLConfig_1
??CLOCK_DCO_PLLConfig_5:
        RETA
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 1 544 bytes in segment CODE
//    10 bytes in segment DATA16_AN
//    16 bytes in segment DATA20_C
//    40 bytes in segment DATA20_N
// 
// 1 544 bytes of CODE  memory
//    16 bytes of CONST memory
//    40 bytes of DATA  memory (+ 10 bytes shared)
//
//Errors: none
//Warnings: none
